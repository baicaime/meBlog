<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>收集与整理 on 白菜</title><link>https://blog.baicai.me/categories/%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/</link><description>Recent content in 收集与整理 on 白菜</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>baicai.me</copyright><lastBuildDate>Tue, 28 Jan 2025 11:38:45 +0800</lastBuildDate><atom:link href="https://blog.baicai.me/categories/%E6%94%B6%E9%9B%86%E4%B8%8E%E6%95%B4%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Giffgaff 打开 wificall 的操作步骤及分流规则</title><link>https://blog.baicai.me/article/2025/giffgaff_wificall/</link><pubDate>Tue, 28 Jan 2025 11:38:45 +0800</pubDate><guid>https://blog.baicai.me/article/2025/giffgaff_wificall/</guid><description>&lt;p>打开wificall的好处：可以使用英国本地资费，免费接电话。&lt;/p>
&lt;h3 id="ios需要运营商刷到580版本或者ios174以上版本">ios:需要运营商刷到58.0版本，或者ios17.4以上版本&lt;/h3>
&lt;ul>
&lt;li>关闭wifi和wificall开关&lt;/li>
&lt;li>打开飞行模式&lt;/li>
&lt;li>关闭你的国内运营商&lt;/li>
&lt;li>打开你的wifi&lt;/li>
&lt;li>全局连接英国节点，或走规则&lt;/li>
&lt;li>打开giffgaff的wificall开关，正常就可以连接上了，成功为运营商名字变成giffgaff&lt;/li>
&lt;li>可以解除飞行模式和正常打开你的国内运营商了&lt;/li>
&lt;/ul>
&lt;h3 id="安卓origin-os系统">安卓:origin os系统&lt;/h3>
&lt;ul>
&lt;li>打开wificall开关&lt;/li>
&lt;li>全局连接英国节点，或走规则&lt;/li>
&lt;li>正常就可以直接连上wificall&lt;/li>
&lt;/ul>
&lt;h3 id="分流规则">分流规则&lt;/h3>
&lt;pre tabindex="0">&lt;code># 地区检测
DOMAIN-SUFFIX, gspe1-ssl.ls.apple.com
# 沃达丰
DOMAIN-SUFFIX, epdg.epc.mnc015.mcc234.pub.3gppnetwork.org
DOMAIN-SUFFIX, ss.epdg.epc.mnc015.mcc234.pub.3gppnetwork.org
DOMAIN-SUFFIX, ss.epdg.epc.geo.mnc015.mcc234.pub.3gppnetwork.org
DOMAIN-SUFFIX, entsrv-uk.vodafone.com
DOMAIN-SUFFIX, vuk-gto.prod.ondemandconnectivity.com
IP-CIDR,88.82.0.0/19
# CMLinkUK EE
IP-CIDR,46.68.0.0/17
# Giffgaff
IP-CIDR,87.194.0.0/16
&lt;/code>&lt;/pre>&lt;p>或&lt;/p>
&lt;pre tabindex="0">&lt;code> # 地区检测
- &amp;#39;DOMAIN-SUFFIX,gspe1-ssl.ls.apple.com,WifiCall&amp;#39;
# 沃达丰
- &amp;#39;DOMAIN-SUFFIX,epdg.epc.mnc015.mcc234.pub.3gppnetwork.org,WifiCall&amp;#39;
- &amp;#39;DOMAIN-SUFFIX,ss.epdg.epc.mnc015.mcc234.pub.3gppnetwork.org,WifiCall&amp;#39;
- &amp;#39;DOMAIN-SUFFIX,ss.epdg.epc.geo.mnc015.mcc234.pub.3gppnetwork.org,WifiCall&amp;#39;
- &amp;#39;DOMAIN-SUFFIX,entsrv-uk.vodafone.com,WifiCall&amp;#39;
- &amp;#39;DOMAIN-SUFFIX,vuk-gto.prod.ondemandconnectivity.com,WifiCall&amp;#39;
- &amp;#39;IP-CIDR,88.82.0.0/19,WifiCall,no-resolve&amp;#39;
# CMLinkUK EE
- &amp;#39;IP-CIDR,46.68.0.0/17,WifiCall,no-resolve&amp;#39;
# Giffgaff
- &amp;#39;IP-CIDR,87.194.0.0/16,WifiCall,no-resolve&amp;#39;
&lt;/code>&lt;/pre>&lt;p>节点需要支持UDP!!! wificall走的UDP的500和4500端口&lt;/p></description></item><item><title>Go语言进制以及进制转换</title><link>https://blog.baicai.me/article/2024/fmt_int/</link><pubDate>Tue, 24 Sep 2024 19:52:33 +0800</pubDate><guid>https://blog.baicai.me/article/2024/fmt_int/</guid><description>&lt;h3 id="二进制-0b或者0b-表示">二进制 0B或者0b 表示&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">bin1&lt;/span> = &lt;span style="color:#ae81ff">0b1101&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num01&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">0b1100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%b的十进制为%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">num01&lt;/span>,&lt;span style="color:#a6e22e">num01&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="八进制-0o或者0o-表示">八进制 0O或者0o 表示&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">oct&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o1234567&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num01&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%o的十进制为%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">num01&lt;/span>,&lt;span style="color:#a6e22e">num01&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="十六进制-0x或者0x-表示">十六进制 0X或者0x 表示&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">hex&lt;/span> = &lt;span style="color:#ae81ff">0x1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num01&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">0xf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%x的十进制为%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">num01&lt;/span>,&lt;span style="color:#a6e22e">num01&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="进制转换">进制转换&lt;/h3>
&lt;pre tabindex="0">&lt;code>1. 二进制转八进制 %b -&amp;gt; %o
2. 二进制转十进制 %b -&amp;gt; %d
3. 二进制转十六进制 %b -&amp;gt; %x
4. 八进制转二进制 %o -&amp;gt; %b
5. 八进制转十进制 %o -&amp;gt; %d
6. 八进制转十六进制 %o -&amp;gt; %x
7. 十进制转二进制 %d -&amp;gt; %b
8. 十进制转八进制 %d -&amp;gt; %o
9. 十进制转十六进制 %d -&amp;gt; %x
10. 十六进制转二进制 %x -&amp;gt; %b
11. 十六进制转八进制 %x -&amp;gt; %o
12. 十六进制转十进制 %x -&amp;gt; %d
// 例
fmt.Printf(&amp;#34;十进制%d转成八进制%o&amp;#34;,num1,num2)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>%b 表示为二进制
%c 该值对应的unicode码值
%d 表示为十进制
%o 表示为八进制
%q 该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示
%x 表示为十六进制，使用a-f
%X 表示为十六进制，使用A-F
%U 表示为Unicode格式：U+1234，等价于&amp;#34;U+%04X&amp;#34;
%E 用科学计数法表示
%f 用浮点数表示
&lt;/code>&lt;/pre>&lt;p>快速测试
&lt;a href="https://go.dev/play/">go.dev/play&lt;/a>&lt;/p></description></item><item><title>查找子域名解析: 子域名探测方法大全</title><link>https://blog.baicai.me/article/2024/find_subdomain/</link><pubDate>Mon, 05 Feb 2024 18:58:56 +0800</pubDate><guid>https://blog.baicai.me/article/2024/find_subdomain/</guid><description>&lt;h2 id="子域名探测">子域名探测&lt;/h2>
&lt;p>通过收集子域名信息来进行渗透是目前常见的一种手法。
子域名信息收集可以通过手工，也可以通过工具，还可以通过普通及漏洞搜索引擎来进行分析。
在挖SRC漏洞时，子域名信息的收集至关重要！&lt;/p>
&lt;h2 id="为什么要进行子域名探测">为什么要进行子域名探测？&lt;/h2>
&lt;p>子域名探测可以帮我们发现渗透测试中更多的服务，这将增加发现漏洞的可能性&lt;br>
查找一些用户上较少，被人遗忘的子域名，其上运行的应用程序可能会使我们发现关键漏洞&lt;br>
通常，同一组织的不同域名/应用程序中存在相同的漏洞&lt;br>
子域名中的常见资产类型一般包括办公系统，邮箱系统，论坛，商城等，其他管理系统，网站管理后台等较少出现在子域名中&lt;/p>
&lt;h2 id="子域名探测方法大全">子域名探测方法大全&lt;/h2>
&lt;p>在线接口&lt;br>
暴力枚举&lt;br>
搜索引擎&lt;br>
Certificate Transparency（证书透明）&lt;br>
Subject Alternate Name (SAN) - 主题备用名称&lt;br>
Public datasets（公开数据集）&lt;br>
信息泄露&lt;br>
内容解析（HTML，JavaScript，文件）&lt;br>
DNS解析&lt;br>
区域传送&lt;br>
DNS aggregators（DNS聚合器）&lt;br>
DNS Cache Snooping（域名缓存侦测）&lt;br>
Alterations &amp;amp; permutations（换置 &amp;amp; 排序）&lt;br>
DNSSEC(Domain Name System Security Extensions)，DNS安全扩展，DNSSEC区域漫步&lt;br>
CSP HTTP首部&lt;br>
SPF记录&lt;br>
虚拟主机爆破&lt;br>
ASN发现&lt;br>
爬虫 Scraping（抓取）&lt;/p>
&lt;h3 id="在线接口">在线接口&lt;/h3>
&lt;pre tabindex="0">&lt;code>https://crt.sh/
https://censys.io/
https://transparencyreport.google.com/https/certificates
https://dnsdumpster.com/
https://hackertarget.com/find-dns-host-records/
https://x.threatbook.cn/
https://www.virustotal.com/gui/home/search
https://site.ip138.com/baidu.com/domain.htm
https://www.t1h2ua.cn/tools/
http://tool.chinaz.com/subdomain/
&lt;/code>&lt;/pre>&lt;h3 id="暴力枚举">暴力枚举&lt;/h3>
&lt;p>Layer子域名爆破机 Layer是windows下的一款子域名探测工具，其工作原理是利用子域名字典进行爆破，使用简单容易上手。&lt;/p>
&lt;p>Amass 工具描述：爆破, google, VirusTotal, alt names&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/OWASP/Amass/...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>amass -d target.com -o $outfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Knock 工具描述：AXFR, virustotal, 爆破&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install python-dnspython git clone https://xxx.com/guelfoweb/knock.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd knock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nano knockpy/config.json &lt;span style="color:#75715e"># &amp;lt;- set your virustotal API_KEY python setup.py install&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="搜索引擎">搜索引擎&lt;/h3>
&lt;p>Google&lt;br>
intitle=公司名称&lt;br>
过滤掉 -site:www.target.com&lt;br>
我们可以在Google搜索中使用 site:运算符来查找一个域的所有子域名&lt;br>
谷歌还额外支持减号运算符 site:*.wikimedia.org -www -store -jobs -uk 以排除我们不感兴趣的子域名&lt;/p>
&lt;p>Bing&lt;br>
Bing搜索引擎也支持一些高级搜索运算符。&lt;br>
与Google一样，Bing也支持site:运算符，可以帮助您检查除Google搜索之外的其他结果。&lt;br>
发现子域名: site:target.com&lt;/p>
&lt;p>百度&lt;br>
intitle=公司名称&lt;/p>
&lt;p>钟馗之眼&lt;/p>
&lt;pre tabindex="0">&lt;code>https://www.zoomeye.org/ site=target.com
&lt;/code>&lt;/pre>&lt;p>duckduckgo&lt;/p>
&lt;pre tabindex="0">&lt;code>https://duckduckgo.com site:target.com
&lt;/code>&lt;/pre>&lt;h3 id="certificate-transparency-证书透明">Certificate Transparency （证书透明）&lt;/h3>
&lt;h5 id="ssltls证书">SSL/TLS证书&lt;/h5>
&lt;p>证书透明度(Certificate Transparency)是证书授权机构的一个项目，证书授权机构会将每个SSL/TLS证书发布到公共日志中。&lt;br>
一个SSL/TLS证书通常包含域名、子域名和邮件地址。&lt;br>
查找某个域名所属证书的最简单的方法就是使用搜索引擎搜索一些公开的CT日志。&lt;/p>
&lt;p>在线查询：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://crt.sh/
https://censys.io/
https://developers.facebook.com/tools/ct/
https://google.com/transparencyreport/https/ct/
https://transparencyreport.google.com/https/certificates
&lt;/code>&lt;/pre>&lt;p>CTFR 工具描述：滥用证书透明记录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/UnaPibaGeek/ctfr.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ctfr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip3 install -r requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 ctfr.py -d target.com -o $outfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Censys_subdomain_enum.py&lt;br>
工具描述：提取子域名，从Censys的SSL/TLS证书中收集子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install censys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/appsecco/the-art-of-subdomain-enumeration.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python censys_enumeration.py target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cloudflare_enum.py&lt;br>
工具描述：从Cloudflare提取子域名 dns聚合器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install censys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/appsecco/the-art-of-subdomain-enumeration.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cloudflare_subdomain_enum.py your@cloudflare.email target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Crt_enum_web.py&lt;br>
工具描述：解析https://crt.sh/页面的子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install psycopg2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/appsecco/the-art-of-subdomain-enumeration.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 crtsh_enum_web.py target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>San_subdomain_enum.py&lt;br>
工具描述：SSL/TLS证书中的SAN获取子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/appsecco/the-art-of-subdomain-enumeration.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./san_subdomain_enum.py target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="subject-alternate-name-san-主题备用名称">Subject Alternate Name （SAN）-主题备用名称&lt;/h4>
&lt;p>SAN(Subject Alternate Name)主题备用名称，主题备用名称证书简单来说，在需要多个域名，将其用于各项服务时，可使用SAN证书。&lt;br>
允许在安全证书中使用subjectAltName字段将多种值与证书关联，这些值被称为主题备用名称。名称可包括：IP地址、DNS名称等。&lt;/p>
&lt;p>San_subdomain_enum.py&lt;br>
工具描述：SSL/TLS证书中的SAN获取子域名 如上。&lt;/p>
&lt;h4 id="public-datasets-公开数据集">Public datasets （公开数据集）&lt;/h4>
&lt;p>有些项目收集了全互联网范围内的扫描数据，并将其提供给研究人员和安全社区。&lt;br>
该项目发布的数据集是子域名信息的宝库。&lt;br>
虽然在这个庞大的数据集中找到子域名就像大海捞针，但却值得我们去一试。&lt;/p>
&lt;p>Rapid7 Forward DNS dataset (Project Sonar)&lt;br>
工具描述：来自rapid7 sonar项目的公共数据集&lt;/p>
&lt;p>数据聚合网站&lt;/p>
&lt;pre tabindex="0">&lt;code>https://opendata.rapid7.com/
&lt;/code>&lt;/pre>&lt;h3 id="信息泄漏">信息泄漏&lt;/h3>
&lt;p>信息泄露&lt;br>
首先找到目标站点，在官网中可能会找到相关资产（多为办公系统，邮箱系统等），关注一下页面底部，也许有管理后台等收获。&lt;/p>
&lt;p>文件泄漏&lt;br>
crossdomain.xml(跨域策略文件cdx) robots.txt&lt;/p>
&lt;p>Git仓库泄露&lt;/p>
&lt;p>从流量中分析提取&lt;/p>
&lt;h3 id="内容解析htmljavascript文件">内容解析（HTML，JavaScript，文件）&lt;/h3>
&lt;p>BiLE-suite&lt;br>
工具描述：HTML解析，反向dns解析&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aptitude install httrack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/sensepost/BiLE-suite.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl BiLE.pl target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Second Order&lt;br>
工具描述：第二阶段域名扫描 通过HTML提取子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get xxx.com/mhmdiaa/second-order
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp ~/go/src/xxx.com/mhmdiaa/second-order/config.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~/go/src/xxx.com/mhmdiaa/second-order/config-subs-enum.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编辑修改LogCrawledURLs为True&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>second-order -base https://target.com -config config.json -output target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dns解析">DNS解析&lt;/h3>
&lt;p>在线查询:&lt;/p>
&lt;pre tabindex="0">&lt;code>VirusTotal(https://www.virustotal.com/)
ViewDNS(https://viewdns.info/)
DNSdumpster(https://dnsdumpster.com/)
&lt;/code>&lt;/pre>&lt;p>BiLE-suite&lt;br>
工具描述：HTML解析，反向dns解析 如上。&lt;/p>
&lt;p>Massdns&lt;br>
工具描述：dns解析&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/blechschmidt/massdns.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd massdns/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解析域名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/bin/massdns -r lists/resolvers.txt -t AAAA -w results.txt domains.txt -o S -w output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>爆破域名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./scripts/subbrute.py wordlist.txt target.com | ./bin/massdns -r lists/resolvers.txt -t A -o S -w output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CT解析：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./scripts/ct.py target.com | ./bin/massdns -r lists/resolvers.txt -t A -o S -w output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="区域传送">区域传送&lt;/h3>
&lt;p>域传送是一种DNS事务，DNS服务器将其全部或部分域文件的副本传递给另一个DNS服务器。&lt;br>
如果未安全地配置域传输送，则任何人都可以对指定名称的服务器启动域传送并获取域文件的副本。&lt;br>
根据设计，域文件包含有关域和保存在域中的大量主机信息。&lt;/p>
&lt;p>Windows：&lt;br>
1.nslookup命令进入交互式shell&lt;br>
2.server命令 参数设定查询将要使用的DNS服务器&lt;br>
3.ls命令列出某个域中的所有域名&lt;/p>
&lt;p>Linux：&lt;br>
Dig&lt;br>
工具描述：dns区域传送，dns反向解析，dns解析&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dig +multi AXFR target.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dig +multi AXFR $ns_server target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dns-aggregators-dns聚合器">DNS aggregators （DNS聚合器）&lt;/h3>
&lt;p>Cloudflare_enum.py&lt;br>
工具描述：从Cloudflare提取子域名 dns聚合器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install censys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://xxx.com/appsecco/the-art-of-subdomain-enumeration.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cloudflare_subdomain_enum.py your@cloudflare.email&lt;span style="color:#f92672">[&lt;/span>4&lt;span style="color:#f92672">]&lt;/span> target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dns-cache-snooping-域名缓存侦测">DNS Cache Snooping （域名缓存侦测）&lt;/h3>
&lt;p>域名缓存侦测（DNS Cache Snooping）技术&lt;br>
在企业网络中，通常都会配置DNS服务器，为网络内的主机提供域名解析服务。&lt;br>
这些DNS不仅解析自己的私有域名，还会用递归方式，请求公网的DNS解析第三方域名，如baidu.com之类。&lt;br>
为了提升性能，通常会使用缓存记录，记录解析过的域名，尤其是第三方域名。&lt;br>
域名缓存侦测（DNS Cache Snooping）技术就是向这些服务器发送域名解析请求，但要求不使用递归模式。&lt;br>
这样DNS只能解析私有域名和缓存中保存的域名。&lt;br>
借助该项技术，渗透测试人员就知道哪些域名是否被过请求过。&lt;br>
例如，测试人员可以提交某安全软件更新所使用的域名，如果有记录，说明该网络使用该种安全软件。&lt;/p>
&lt;h3 id="alterations--permutations-换置--排序">Alterations &amp;amp; permutations (换置 &amp;amp; 排序)&lt;/h3>
&lt;p>AltDNS&lt;br>
工具描述：通过换置&amp;amp;排序技术发现子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://xxx.com/infosec-au/altdns.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd altdns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./altdns.py -i subdomains.txt -o data_output -w words.txt -r -s results_output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dnssecdomain-name-system-security-extensionsdns安全扩展dnssec区域漫步">DNSSEC(Domain Name System Security Extensions),DNS安全扩展，DNSSEC区域漫步&lt;/h3>
&lt;p>由于DNSSEC处理不存在域名的方式，您可以&amp;quot;遍历&amp;quot;DNSSEC域并枚举该域中的所有域名。&lt;/p>
&lt;p>Ldns-walk&lt;br>
工具描述：DNSSEC zone walking, 如果DNSSEC NSEC开启，可以获得全部域名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aptitude install ldnsutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldns-walk target.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldns-walk @nsserver.com target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果DNSSEC NSEC开启，可以获得全部域名。&lt;/p>
&lt;h3 id="csp-http-首部">CSP HTTP 首部&lt;/h3>
&lt;p>Domains-from-csp&lt;br>
工具描述：从CSP头提取子域名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/yamakira/domains-from-csp.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install click
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python csp_parser.py $URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python csp_parser.py $URL -r
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="spf记录">SPF记录&lt;/h3>
&lt;p>SPF是通过域名的TXT记录来进行设置的，SPF记录列出了所有被授权代表域名发送电子邮件的主机&lt;/p>
&lt;p>Assets-from-spf&lt;br>
工具描述：SPF域名记录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/yamakira/assets-from-spf.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install click ipwhois
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python assets_from_spf.py target.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="虚拟主机爆破">虚拟主机爆破&lt;/h3>
&lt;p>vhost-brute&lt;br>
工具描述：虚拟主机爆破&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aptitude install php-curl git clone https://github.com/gwen001/vhost-brute.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Virtual-host-discovery&lt;br>
工具描述：虚拟主机爆破&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/jobertabma/virtual-host-discovery.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ruby scan.rb --ip&lt;span style="color:#f92672">=&lt;/span>1.1.1.1 --host&lt;span style="color:#f92672">=&lt;/span>target.com --output output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="asn发现">ASN发现&lt;/h3>
&lt;p>通过域名查询到 ASN，再通过 ASN 查询到所属的所有 ip 范围&lt;/p>
&lt;h3 id="爬虫-scraping抓取">爬虫 Scraping（抓取）&lt;/h3>
&lt;h4 id="泛解析问题">泛解析问题&lt;/h4>
&lt;p>目前最好的解决方式是通过先获取一个绝对不存在域名的响应内容，再遍历获取每个字典对应的子域名的响应内容，通过和不存在域名的内容做相似度比对，来枚举子域名，但这样的实现是以牺牲速度为代价&lt;/p>
&lt;h3 id="tools">Tools&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>工具也有很多厉害的，平时我一般使用 OneForALL + ESD + JSfinder 来进行搜集，（ESD 可以加载 layer 的字典，很好用）
&lt;code>https://github.com/shmilylty/OneForAll&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>强大的快速子域枚举工具
&lt;code>https://github.com/aboul3la/Sublist3r&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Knock子域名获取，可用于查找子域名接管漏洞
&lt;code>https://github.com/guelfoweb/knock&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一款便捷高效的子域名爆破工具
&lt;code>https://github.com/yanxiu0614/subdomain3&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go语言开发的子域名枚举工具
&lt;code>https://github.com/caffix/amass&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承于Sublist3r项目的模块化体系结构
&lt;code>https://github.com/Ice3man543/subfinder&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>带有网页截图功能的子可视化域名枚举工具
&lt;code>https://github.com/janniskirschner/horn3t&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lijiejie开发的一款使用广泛的子域名爆破枚举工具
&lt;code>https://github.com/lijiejie/subDomainsBrute&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>猪猪侠开发的一款域名收集全面、精准的子域名枚举工具
&lt;code>https://github.com/ring04h/wydomain&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="子域名监控">子域名监控&lt;/h3>
&lt;p>&lt;code>https://github.com/LangziFun/LangSrcCurise&lt;/code>&lt;/p>
&lt;p>&lt;code>https://www.freebuf.com/sectool/198396.html&lt;/code>&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/m8ucI1bDxILM8wLU6pLmoQ">1&lt;/a>
&lt;a href="https://xz.aliyun.com/t/3478">2&lt;/a>
&lt;a href="https://blog.csdn.net/qq_39293438/article/details/104829825">3&lt;/a>
&lt;a href="https://info.menandmice.com/blog/bid/73645/Take-your-DNSSEC-with-a-grain-of-salt">4&lt;/a>&lt;/p></description></item><item><title>甲骨文Vps iptables 开放端口设置</title><link>https://blog.baicai.me/article/2023/oracle_vps_iptables/</link><pubDate>Mon, 18 Sep 2023 10:20:17 +0800</pubDate><guid>https://blog.baicai.me/article/2023/oracle_vps_iptables/</guid><description>&lt;p>在甲骨文的网页后台先开放端口&lt;/p>
&lt;h2 id="iptables-开放所有端口">iptables 开放所有端口&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo iptables -P INPUT ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo iptables -P FORWARD ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo iptables -P OUTPUT ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo iptables -F
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="oracle自带的镜像默认设置了iptable规则关闭它">Oracle自带的镜像默认设置了Iptable规则，关闭它&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get purge netfilter-persistent &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试端口是否已经开放&lt;/p>
&lt;h2 id="附注">附注：&lt;/h2>
&lt;h3 id="强制删除规则">强制删除规则&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo rm -rf /etc/iptables &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除oracle-cloud-agent防止甲骨文监控">删除oracle-cloud-agent，防止甲骨文监控&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>snap remove oracle-cloud-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检查防火墙服务状态">检查防火墙服务状态&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo systemctl status iptables.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl status netfilter-persistent.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="远程检测端口开放状态">远程检测端口开放状态&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nmap ip或域名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附注2开放指定端口">附注2(开放指定端口):&lt;/h2>
&lt;h3 id="iptables-开放指定端口">iptables 开放指定端口&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> iptables -I INPUT -p tcp --dport &lt;span style="color:#ae81ff">80&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>中间的 80 为所需要开放的端口，tcp 为传输协议&lt;/p>
&lt;h4 id="保存规则">保存规则&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> iptables-save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述命令我们就完成了开放指定的端口，但是如果此时服务器重启，上述规则就没有了，所以我们需要对规则进行一下持久化操作&lt;/p>
&lt;h3 id="安装-iptables-persistent">安装 iptables-persistent&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> sudo apt-get install iptables-persistent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="持久化规则">持久化规则&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> sudo netfilter-persistent save
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo netfilter-persistent reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>检查网络延时测试 URL 汇总，可用于软件测试延时</title><link>https://blog.baicai.me/article/2023/urltest-urltest/</link><pubDate>Mon, 28 Aug 2023 23:04:59 +0800</pubDate><guid>https://blog.baicai.me/article/2023/urltest-urltest/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">服务提供者&lt;/th>
&lt;th style="text-align:left">链接&lt;/th>
&lt;th style="text-align:center">大陆体验&lt;/th>
&lt;th style="text-align:center">境外体验&lt;/th>
&lt;th style="text-align:center">http/https&lt;/th>
&lt;th style="text-align:center">IP Version&lt;/th>
&lt;th style="text-align:left">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Google&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">Google网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Google&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.google-analytics.com/generate_204">http://www.google-analytics.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">Google网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Google&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.google.com/generate_204">http://www.google.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">Google网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Google&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://connectivitycheck.gstatic.com/generate_204">http://connectivitycheck.gstatic.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">Google网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Apple&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://captive.apple.com">http://captive.apple.com&lt;/a>&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">200/200&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">苹果设备用于检测 Wi-Fi 是否需要认证登陆的链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Apple&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.apple.com/library/test/success.html">http://www.apple.com/library/test/success.html&lt;/a>&lt;/td>
&lt;td style="text-align:center">7&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">200/200&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">苹果设备用于检测 Wi-Fi 是否需要认证登陆的链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">MicroSoft&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.msftconnecttest.com/connecttest.txt">http://www.msftconnecttest.com/connecttest.txt&lt;/a>&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">200/error&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">微软的网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Cloudflare&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://cp.cloudflare.com/generate_204">http://cp.cloudflare.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">Cloudflare的联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Firefox&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://detectportal.firefox.com/success.txt">http://detectportal.firefox.com/success.txt&lt;/a>&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">200/200&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">火狐的网络联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">V2ex&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://www.v2ex.com/generate_204">http://www.v2ex.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">204/301&lt;/td>
&lt;td style="text-align:center">4+6&lt;/td>
&lt;td style="text-align:left">v2ex 的联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">小米&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://connect.rom.miui.com/generate_204">http://connect.rom.miui.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">小米的联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">华为&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://connectivitycheck.platform.hicloud.com/generate_204">http://connectivitycheck.platform.hicloud.com/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">华为的联通性测试地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Vivo&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://wifi.vivo.com.cn/generate_204">http://wifi.vivo.com.cn/generate_204&lt;/a>&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">204/204&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">vivo 的联通性测试地址&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>以上大陆指中国大陆，境外指非中国大陆。&lt;/p>
&lt;p>体验目前仅进行粗略测试延迟，大概率实际不符，仅作参考。&lt;/p>
&lt;p>http/https一列表示使用指定协议进行请求，返回的状态码。部分场合对状态码要求较严格。&lt;/p></description></item><item><title>在 Debian 11 为 nginx 配置 Let's Encrypt SSL证书</title><link>https://blog.baicai.me/article/2022/debian_install_certbot-debian_install_certbot/</link><pubDate>Tue, 01 Nov 2022 22:18:02 +0800</pubDate><guid>https://blog.baicai.me/article/2022/debian_install_certbot-debian_install_certbot/</guid><description>&lt;p>在Debian 11 Nginx配置Let&amp;rsquo;s Encrypt SSL证书&lt;/p>
&lt;h3 id="安装-certbot-及-certbot-nginx-插件">安装 Certbot 及 certbot nginx 插件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sudo apt -y install certbot python3-certbot-nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="为-nginx-网站生成证书并配置">为 nginx 网站生成证书并配置&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>certbot --nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是首次运行CertBot获取SSL证书，它将会询问你的电子邮件，输入一个你常用的邮件地址，它会在到期之前通知你。&lt;/p>
&lt;p>也可以为特定域名获取证书配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>certbot --nginx -d baicai.me
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用certbot自动更新ssl证书">使用Certbot自动更新SSL证书&lt;/h3>
&lt;p>Let&amp;rsquo;s Encrypt的SSL证书会在3个月到期即90天，因此你可能需要手动续订，但Certbot软件包附带了一个cron任务和systemd计时器，它将在证书过期之前进行自动续订。
除非你更改配置，否则无需再次手动运行Certbot。
您可以通过运行以下命令来测试证书的自动续订。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>certbot renew --dry-run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>在 Mac 系统中制作 Debian U盘启动盘</title><link>https://blog.baicai.me/article/2022/mac_create_debian_bootable_usb_flash_drive/</link><pubDate>Thu, 20 Oct 2022 13:18:50 +0800</pubDate><guid>https://blog.baicai.me/article/2022/mac_create_debian_bootable_usb_flash_drive/</guid><description>&lt;p>在Mac系统中制作U盘启动盘
Create a Bootable USB Flash Drive&lt;/p>
&lt;p>在Mac系统中，制作Linux启动盘不需要额外下载任何的工具，办法如下&lt;/p>
&lt;h3 id="下载-debian-dvd-镜像文件">下载 Debian DVD 镜像文件&lt;/h3>
&lt;p>通过 HTTP/FTP 下载 Debian CD/DVD 映像 &lt;a href="https://www.debian.org/CD/http-ftp/">https://www.debian.org/CD/http-ftp/&lt;/a>&lt;/p>
&lt;p>amd64 DVD版 &lt;a href="https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/">https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/&lt;/a>&lt;/p>
&lt;h3 id="格式化usb盘">格式化USB盘&lt;/h3>
&lt;p>打开系统自带的磁盘管理工具，插上U盘，格式化U盘，选择格式如下：
格式：Mac OS 扩展（日志式）
方案：GUID 分区图&lt;/p>
&lt;h3 id="取消usb磁盘挂载">取消Usb磁盘挂载&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 终端执行以下命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 列出磁盘，找到你usb硬盘的盘符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>diskutil list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 输出如下：可以看到usb硬盘为/dev/disk2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/disk2 &lt;span style="color:#f92672">(&lt;/span>external, physical&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#: TYPE NAME SIZE IDENTIFIER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0: FDisk_partition_scheme *32.0 GB disk2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1: 0xEF 6.4 MB disk2s2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取消usb硬盘的挂载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>diskutil unmountDisk /dev/disk2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="导入镜像">导入镜像&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 执行如下命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># if是镜像文件路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># of是导入的目的磁盘&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># bs是读写快的大小，太小会增大io，降低效率，一般1m～2m即可。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>~/Downloads/debian-11.5.0-amd64-DVD-1.iso of&lt;span style="color:#f92672">=&lt;/span>/dev/disk2 bs&lt;span style="color:#f92672">=&lt;/span>2m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 或 这里的U盘注意是rdisk2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>~/Downloads/debian-11.5.0-amd64-DVD-1.iso of&lt;span style="color:#f92672">=&lt;/span>/dev/rdisk2 bs&lt;span style="color:#f92672">=&lt;/span>2m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>if是输入文件。&lt;/li>
&lt;li>of是输出文件&lt;/li>
&lt;li>bs是传输文件速度&lt;/li>
&lt;/ul>
&lt;h3 id="等待导入完成">等待导入完成&lt;/h3>
&lt;p>此导入需要等待一段时间，可能会比较久。耐心等待。
直到出现records in，records out，即成功了。&lt;/p>
&lt;h3 id="弹出u盘">弹出U盘&lt;/h3>
&lt;p>在快要完成的时候，系统会出现“磁盘无法识别”的提示，先不要做任何操作，等待终端dd命令执行完成后，执行下面命令弹出U盘。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diskutil eject /dev/disk2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>弹出后再选择“忽略”系统提示。&lt;/p></description></item><item><title>Debian 安装慢的解决方案</title><link>https://blog.baicai.me/article/2022/debian_install/</link><pubDate>Tue, 18 Oct 2022 14:37:40 +0800</pubDate><guid>https://blog.baicai.me/article/2022/debian_install/</guid><description>&lt;h3 id="解决-debian-安装过程慢的可行方案">解决 Debian 安装过程慢的可行方案：&lt;/h3>
&lt;ul>
&lt;li>如果使用的是Dvd版的iso镜像，可以在安装前拔掉网线，通过离线安装，会非常快。&lt;/li>
&lt;li>安装时选择 expert，不要选择 安全更新。&lt;/li>
&lt;li>安装过程修改软件源。&lt;/li>
&lt;/ul>
&lt;h3 id="debian-dvd-1-镜像下载地址">Debian DVD-1 镜像下载地址&lt;/h3>
&lt;p>通过 HTTP/FTP 下载 Debian CD/DVD 映像 &lt;a href="https://www.debian.org/CD/http-ftp/">https://www.debian.org/CD/http-ftp/&lt;/a>&lt;/p>
&lt;p>amd64 DVD版 &lt;a href="https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/">https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/&lt;/a>&lt;/p>
&lt;h3 id="debian-安装过程中-修改软件源中的安全源地址">Debian 安装过程中 修改软件源中的安全源地址&lt;/h3>
&lt;p>在Debian安装步骤进入到选择安装的桌面环境和软件时, 键入 &lt;strong>Ctrl+Alt+F2&lt;/strong> 可以看到从图形界面转到了tty命令终端, 键入 &lt;strong>Enter&lt;/strong>
这里修改软件源配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nano /target/etc/apt/sources.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改debian-security源地址 &lt;a href="http://mirrors.ustc.edu.cn">http://mirrors.ustc.edu.cn&lt;/a> 目测最快&lt;/p>
&lt;pre tabindex="0">&lt;code>#deb http://security.debian.org/debian-security bullseye-security main
deb http://mirrors.ustc.edu.cn/debian-security bullseye-security main
&lt;/code>&lt;/pre>&lt;p>修改后 &lt;strong>Ctrl+X&lt;/strong> 退出保存&lt;/p>
&lt;p>然后退出终端重新进入界面继续安装，键入 &lt;strong>Ctrl+Alt+F5&lt;/strong>&lt;/p>
&lt;h3 id="debian-安装完成后更新硬件驱动">Debian 安装完成后更新硬件驱动&lt;/h3>
&lt;p>在设置——》关于——〉更新——》软件源，去掉cdrome的源，勾选合适的源
然后通过 dmesg 查看启动日志。
查找哪些固件加载异常，根据情况安装驱动（比如我的缺失显卡驱动和无线网卡驱动）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 更新源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dmesg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># demsg查看到 缺失显卡驱动&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install firmware-amd-graphics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># demsg查看到 缺失 rtl8168e-3.fw 固件程序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 搜索固件信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt search rtl8168e-3.fw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 正在排序... 完成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 全文搜索... 完成 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># firmware-realtek/stable,now 20210315-3 all [已安装]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Binary firmware for Realtek wired/wifi/BT adapters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 根据上面查到的信息 安装驱动包 firmware-realtek&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install firmware-realtek
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>如何关闭 Ubuntu 中的开放端口？</title><link>https://blog.baicai.me/article/2022/ubuntu_kill_port_porc/</link><pubDate>Sun, 19 Jun 2022 22:53:02 +0800</pubDate><guid>https://blog.baicai.me/article/2022/ubuntu_kill_port_porc/</guid><description>&lt;p>如何关闭 Ubuntu 中的开放端口？&lt;/p>
&lt;h3 id="问题描述">问题描述&lt;/h3>
&lt;p>列出所有打开的端口，以关闭一些应用程序的端口。&lt;/p>
&lt;h3 id="最佳办法">最佳办法&lt;/h3>
&lt;p>如果要关闭端口，则必须终止进程或停止相关服务。
可以使用 netstat -nalp 和 lsof -i:port 工具来识别打开端口后面的进程/二进制文件。&lt;/p>
&lt;p>netstat 可用于查看端口统计信息。
要显示所有开放端口的列表：&lt;/p>
&lt;pre>&lt;code>sudo netstat -lnp
&lt;/code>&lt;/pre>
&lt;p>列出所有侦听端口号以及每个负责的进程。终止或终止进程以关闭端口。 ( kill , pkill …)&lt;/p>
&lt;p>关闭一个打开的端口：&lt;/p>
&lt;pre>&lt;code>sudo fuser -k port_no/tcp
&lt;/code>&lt;/pre>
&lt;p>例子：&lt;/p>
&lt;pre>&lt;code>sudo fuser -k 8080/tcp
&lt;/code>&lt;/pre>
&lt;h3 id="次佳办法">次佳办法&lt;/h3>
&lt;p>要在 ubuntu 中关闭开放端口，可以使用以下命令&lt;/p>
&lt;pre>&lt;code>sudo kill $(sudo lsof -t -i:3000)
&lt;/code>&lt;/pre>
&lt;p>代替 3000 你可以指定你的端口号&lt;/p>
&lt;p>lsof 命令将提供有关进程打开的文件的信息&lt;/p>
&lt;p>-t ：此标志指定 lsof 应仅生成带有进程标识符且没有标头的简洁输出 – 例如，以便可以将输出通过管道传输到 kill(1)。此选项选择 -w 选项。&lt;/p>
&lt;p>-i ：此标志选择任何 Internet 地址与 i 中指定的地址匹配的文件列表。如果未指定地址，此选项将选择所有 Internet 和 x.25 (HP-UX) 网络文件的列表。&lt;/p>
&lt;h3 id="防火墙规则应用">防火墙规则应用&lt;/h3>
&lt;pre>&lt;code>sudo ufw allow 22
sudo ufw deny 22
&lt;/code>&lt;/pre>
&lt;h3 id="附注">附注&lt;/h3>
&lt;p>关闭特定进程&lt;/p>
&lt;pre>&lt;code>kill $(ps -e|grep firefox|awk '{print $1}')
&lt;/code>&lt;/pre></description></item><item><title>ubuntu上安装微信(wechat)</title><link>https://blog.baicai.me/article/2022/ubuntu_wechat-install/</link><pubDate>Sun, 30 Jan 2022 15:19:12 +0800</pubDate><guid>https://blog.baicai.me/article/2022/ubuntu_wechat-install/</guid><description>&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>由于微信官网 &lt;a href="https://weixin.qq.com/">https://weixin.qq.com/&lt;/a> 没有linux版本的下载和安装方法，但微信确实提供了优麒麟发行版的官方版本，所以就有了下面的安装方法。&lt;/p>
&lt;h2 id="安装方法">安装方法&lt;/h2>
&lt;p>打开优麒麟应用商店官网，然后下载应用，就看到微信了
&lt;a href="https://www.ubuntukylin.com/applications/106-cn.html">https://www.ubuntukylin.com/applications/106-cn.html&lt;/a>
下载deb包，用命令sudo dpkg -i ，就能安装上了，而且可以用。
这是linux原生的，功能少点，但比wine的要轻巧不少。&lt;/p>
&lt;h2 id="安装方法2">安装方法2&lt;/h2>
&lt;p>下载链接在方法1中，优麒麟应用商店微信应用页面右键 “64位下载” ——&amp;gt; “复制链接”
终端下载Deb安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> wget -O ~/weixin.deb &lt;span style="color:#e6db74">&amp;#34;http://archive.ubuntukylin.com/software/pool/partner/weixin_2.1.1_amd64.deb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo dpkg -i ~/weixin.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>免费CDN：jsDelivr+Github 使用方法</title><link>https://blog.baicai.me/article/2021/jsdelivr_github/</link><pubDate>Fri, 02 Jul 2021 23:50:06 +0800</pubDate><guid>https://blog.baicai.me/article/2021/jsdelivr_github/</guid><description>&lt;p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。&lt;/p>
&lt;h3 id="用-jsdelivr-免费cdn托管静态资源">用 jsDelivr 免费CDN托管静态资源&lt;/h3>
&lt;p>国内的免费 CDN 不少，但需要备案
国外的免费 CDN 也不少，但在国内速度慢
但 jsDelivr 是一个特殊的存在，虽然是一家国外 CDN 但是有国内节点&lt;/p>
&lt;p>jsDelivr官网： &lt;a href="https://www.jsdelivr.com">https://www.jsdelivr.com&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用步骤">使用步骤&lt;/h3>
&lt;p>1、新建Github仓库&lt;/p>
&lt;p>2、克隆Github仓库到本地&lt;/p>
&lt;p>执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone 一键复制的仓库地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3、上传资源&lt;/p>
&lt;p>复制需要上传的资源到本地git仓库（注：jsDelivr不支持加载超过20M的资源），在本地git仓库目录下，执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git status &lt;span style="color:#75715e">#查看状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add . &lt;span style="color:#75715e">#添加所有文件到暂存区&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#39;第一次提交&amp;#39;&lt;/span> &lt;span style="color:#75715e">#把文件提交到仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push &lt;span style="color:#75715e">#推送至远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、发布仓库&lt;/p>
&lt;p>点击release发布&lt;/p>
&lt;p>自定义发布版本号
5、通过jsDelivr引用资源&lt;/p>
&lt;p>使用方法：&lt;code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径&lt;/code>
例如：&lt;/p>
&lt;pre>&lt;code>https://cdn.jsdelivr.net/gh/baicaime/meBlog/index.html
https://cdn.jsdelivr.net/gh/baicaime/meBlog/favicon-16x16.png
https://cdn.jsdelivr.net/gh/clin003/cdn/v@3.1.3/css.css
&lt;/code>&lt;/pre>
&lt;p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：&lt;/p>
&lt;pre>&lt;code>// 加载任何Github发布、提交或分支
https://cdn.jsdelivr.net/gh/user/repo@version/file
// 加载 jQuery v3.2.1
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js
// 使用版本范围而不是特定版本
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js
// 完全省略该版本以获取最新版本
https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js
// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js
// 在末尾添加 / 以获取资源目录列表
https://cdn.jsdelivr.net/gh/jquery/jquery/
// 刷新cnd资源 将域名中的 cdn 改为 purge 即可
https://purge.jsdelivr.net/gh/baicaime/meBlog/index.html
// 使用最新版本资源
https://purge.jsdelivr.net/gh/baicaime/meBlog@latest/index.html
&lt;/code>&lt;/pre></description></item><item><title>跨域方案Nginx配置</title><link>https://blog.baicai.me/article/2021/nginx_cors_server_conf/</link><pubDate>Thu, 01 Jul 2021 18:58:23 +0800</pubDate><guid>https://blog.baicai.me/article/2021/nginx_cors_server_conf/</guid><description>&lt;h3 id="什么是浏览器同源策略">什么是浏览器同源策略？&lt;/h3>
&lt;p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。&lt;/p>
&lt;p>同源是指&amp;quot;协议+域名+端口&amp;quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/p>
&lt;h3 id="如何实现跨域">如何实现跨域？&lt;/h3>
&lt;p>跨域是个比较古老的命题了，历史上跨域的实现手段有很多，我们现在主要介绍Nginx的跨域方案，其余的方案我们就不深入讨论了。&lt;/p>
&lt;h3 id="方便的跨域方案nginx">方便的跨域方案Nginx&lt;/h3>
&lt;p>nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。&lt;/p>
&lt;p>现在的新项目中nginx几乎是首选，我们用node或者go开发的服务通常都需要经过nginx的反向代理。&lt;/p>
&lt;p>反向代理的原理很简单，即所有客户端的请求都必须先经过nginx的处理，nginx作为代理服务器再讲请求转发给node或者go服务，这样就规避了同源策略。&lt;/p>
&lt;pre tabindex="0">&lt;code>#进程, 可更具cpu数量调整
worker_processes 1;
events {
#连接数
worker_connections 1024;
}
http {
include mime.types;
default_type application/octet-stream;
sendfile on;
#连接超时时间，服务器会在这个时间过后关闭连接。
keepalive_timeout 10;
# gizp压缩
gzip on;
# 直接请求nginx也是会报跨域错误的这里设置允许跨域
# 如果代理地址已经允许跨域则不需要这些, 否则报错(虽然这样nginx跨域就没意义了)
add_header Access-Control-Allow-Origin *;
add_header Access-Control-Allow-Headers X-Requested-With;
add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
# srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机
server {
listen 80;
server_name localhost;
# 根路径指到index.html
location / {
root html;
index index.html index.htm;
}
# localhost/api 的请求会被转发到192.168.0.103:8080
location /api {
rewrite ^/b/(.*)$ /$1 break; # 去除本地接口/api前缀, 否则会出现404
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_pass http://192.168.0.103:8080; # 转发地址
}
# 重定向错误页面到/50x.html
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root html;
}
}
}
&lt;/code>&lt;/pre></description></item><item><title>Rust 镜像源</title><link>https://blog.baicai.me/article/2021/rustproxy/</link><pubDate>Fri, 25 Jun 2021 22:53:14 +0800</pubDate><guid>https://blog.baicai.me/article/2021/rustproxy/</guid><description>&lt;p>通常cargo跑得挺顺畅，不怎么需要proxy。但有备无患。&lt;/p>
&lt;h3 id="cratesio-和-rustup-的国内镜像源">crates.io 和 rustup 的国内镜像源&lt;/h3>
&lt;p>字节跳动提供的：https://rsproxy.cn/&lt;/p>
&lt;p>中国科技大学的：https://mirrors.ustc.edu.cn/help/crates.io-index.html&lt;/p>
&lt;p>清华大学的：https://mirrors.tuna.tsinghua.edu.cn/help/rustup/&lt;/p>
&lt;p>上海交通大学的：https://git.sjtu.edu.cn/sjtug/crates.io-index&lt;/p>
&lt;h3 id="更换国内源">更换国内源&lt;/h3>
&lt;p>更换为国内源，否则安装太慢了。
新建文件：~/.cargo/config，内容替换为如下，replace-with 这行可自己 ping 文件中各个国内源头，看哪个源快用哪个：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">[source.crates-io]
registry = &amp;#34;https://github.com/rust-lang/crates.io-index&amp;#34;
# 替换成你偏好的镜像源
replace-with = &amp;#39;sjtu&amp;#39;
# 清华大学
[source.tuna]
registry = &amp;#34;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&amp;#34;
# 中国科学技术大学
[source.ustc]
registry = &amp;#34;git://mirrors.ustc.edu.cn/crates.io-index&amp;#34;
# 上海交通大学
[source.sjtu]
registry = &amp;#34;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&amp;#34;
# rustcc社区
[source.rustcc]
registry = &amp;#34;git://crates.rustcc.cn/crates.io-index&amp;#34;
# 字节跳动
[source.rsproxy]
registry = &amp;#34;https://rsproxy.cn/crates.io-index&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>TOML 语言规范 1.0 正式版</title><link>https://blog.baicai.me/article/2021/toml/</link><pubDate>Sat, 05 Jun 2021 02:59:55 +0800</pubDate><guid>https://blog.baicai.me/article/2021/toml/</guid><description>&lt;p>👉 TOML 语言广泛用于 Rust 项目当中，cargo new 一个新项目时都会新建一个 toml 的配置文件，所以学习 Rust 过程中也有必要熟悉 TOML 语言的相关语法，从而熟练在 Rust 项目中编辑配置文件。&lt;/p>
&lt;p>👉 本文来自 &lt;a href="https://github.com/toml-lang/toml.io">toml-lang 的中文翻译版本&lt;/a>，本文收录在此处，只是方便 Rust 学习者统一查阅，若是发现有任何错误或需要完善地方，请在 toml.io 原项目仓库指出或修改错误。&lt;/p>
&lt;h1 id="toml-v100">TOML v1.0.0&lt;/h1>
&lt;p>全称：Tom 的（语义）明显、（配置）最小化的语言。（Tom&amp;rsquo;s Obvious, Minimal Language）&lt;br>
作者：Tom Preston-Werner、Pradyun Gedam 等人。&lt;/p>
&lt;h3 id="宗旨">宗旨&lt;/h3>
&lt;p>TOML 旨在成为一个语义明显且易于阅读的最小化配置文件格式。&lt;br>
TOML 被设计成可以无歧义地映射为哈希表。&lt;br>
TOML 应该能很容易地被解析成各种语言中的数据结构。&lt;/p>
&lt;h3 id="目录">目录&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="#%E8%A7%84%E6%A0%BC">规格&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B3%A8%E9%87%8A">注释&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%94%AE%E5%80%BC%E5%AF%B9">键值对&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%94%AE%E5%90%8D">键名&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%95%B4%E6%95%B0">整数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%B8%83%E5%B0%94%E5%80%BC">布尔值&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%9D%90%E6%A0%87%E6%97%A5%E6%9C%9F%E6%97%B6%E5%88%BB">坐标日期时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%A5%E6%9C%9F%E6%97%B6%E5%88%BB">各地日期时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%A5%E6%9C%9F">各地日期&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%B6%E5%88%BB">各地时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%95%B0%E7%BB%84">数组&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%A1%A8">表&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%85%E8%81%94%E8%A1%A8">内联表&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%A1%A8%E6%95%B0%E7%BB%84">表数组&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D">文件扩展名&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mime-%E7%B1%BB%E5%9E%8B">MIME 类型&lt;/a>&lt;/li>
&lt;li>&lt;a href="#abnf-%E8%AF%AD%E6%B3%95">ABNF 语法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="规格">规格&lt;/h3>
&lt;ul>
&lt;li>TOML 是大小写敏感的。&lt;/li>
&lt;li>TOML 文件必须是合法的 UTF-8 编码的 Unicode 文档。&lt;/li>
&lt;li>空白是指制表符（0x09）或空格（0x20）。&lt;/li>
&lt;li>换行是指 LF（0x0A）或 CRLF（0x0D0A）。&lt;/li>
&lt;/ul>
&lt;h3 id="注释">注释&lt;/h3>
&lt;p>井字符将该行余下的部分标记为注释，除非它在字符串中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 这是一个全行注释&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 这是一个行末注释&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">another&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;# 这不是一个注释&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除制表符以外的控制字符（U+0000 至 U+0008，U+000A 至 U+001F，U+007F）不允许出现在注释中。&lt;/p>
&lt;h3 id="键值对">键值对&lt;/h3>
&lt;p>TOML 文档最基本的构成区块是键值对。&lt;/p>
&lt;p>键名在等号的左边而值在右边。&lt;br>
键名和键值周围的空白会被忽略。&lt;br>
键、等号和值必须在同一行（不过有些值可以跨多行）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值必须是下述类型之一。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%95%B4%E6%95%B0">整数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%B8%83%E5%B0%94%E5%80%BC">布尔值&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%9D%90%E6%A0%87%E6%97%A5%E6%9C%9F%E6%97%B6%E5%88%BB">坐标日期时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%A5%E6%9C%9F%E6%97%B6%E5%88%BB">各地日期时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%A5%E6%9C%9F">各地日期&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%90%84%E5%9C%B0%E6%97%B6%E5%88%BB">各地时刻&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%95%B0%E7%BB%84">数组&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%86%85%E8%81%94%E8%A1%A8">内联表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>不指定值是非法的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key&lt;/span> = &lt;span style="color:#75715e"># 非法&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>键值对后必须换行（或结束文件）。&lt;br>
（例外见&lt;a href="#%E5%86%85%E8%81%94%E8%A1%A8">内联表&lt;/a>）&lt;/p>
&lt;pre tabindex="0">&lt;code>first = &amp;#34;Tom&amp;#34; last = &amp;#34;Preston-Werner&amp;#34; # 非法
&lt;/code>&lt;/pre>&lt;h3 id="键名">键名&lt;/h3>
&lt;p>键名可以是裸露的，引号引起来的，或点分隔的。&lt;/p>
&lt;p>&lt;strong>裸键&lt;/strong>只能包含 ASCII 字母，ASCII 数字，下划线和短横线（&lt;code>A-Za-z0-9_-&lt;/code>）。&lt;br>
注意裸键允许仅由纯 ASCII 数字构成，例如 &lt;code>1234&lt;/code>，但是是被理解为字符串的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bare_key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bare-key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1234&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>引号键&lt;/strong>遵循与基本字符串或字面量字符串相同的规则并允许你使用更为广泛的键名。&lt;br>
除非明显必要，使用裸键方为最佳实践。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;character encoding&amp;#34;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;ʎǝʞ&amp;#34;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;key2&amp;#39;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;quoted &amp;#34;value&amp;#34;&amp;#39;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>裸键中不能为空，但空引号键是允许的（虽然不建议如此）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>= &lt;span style="color:#e6db74">&amp;#34;no key name&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 非法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;blank&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 合法但不鼓励&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;blank&amp;#39;&lt;/span> &lt;span style="color:#75715e"># 合法但不鼓励&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>点分隔键&lt;/strong>是一系列通过点相连的裸键或引号键。&lt;br>
这允许了你将相近属性放在一起：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Orange&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">physical&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;orange&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">physical&lt;/span>.&lt;span style="color:#a6e22e">shape&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;round&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">site&lt;/span>.&lt;span style="color:#e6db74">&amp;#34;google.com&amp;#34;&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等价于 JSON 的如下结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Orange&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;physical&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;orange&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;shape&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;round&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;site&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;google.com&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有关点分隔键定义表的详细信息，请参阅后文&lt;a href="#%E8%A1%A8">表&lt;/a>一节。&lt;/p>
&lt;p>点分隔符周围的空白会被忽略。&lt;br>
不过，最佳实践是不要使用任何不必要的空白。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 这是最佳实践&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fruit&lt;/span>. &lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;yellow&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 等同于 fruit.color&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fruit&lt;/span> . &lt;span style="color:#a6e22e">flavor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 等同于 fruit.flavor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>缩进被作为空白对待而被忽略。&lt;/p>
&lt;p>多次定义同一个键是非法的。&lt;/p>
&lt;pre tabindex="0">&lt;code># 不要这样做
name = &amp;#34;Tom&amp;#34;
name = &amp;#34;Pradyun&amp;#34;
&lt;/code>&lt;/pre>&lt;p>注意裸键和引号键是等价的：&lt;/p>
&lt;pre tabindex="0">&lt;code># 这是不可行的
spelling = &amp;#34;favorite&amp;#34;
&amp;#34;spelling&amp;#34; = &amp;#34;favourite&amp;#34;
&lt;/code>&lt;/pre>&lt;p>只要一个键还没有被直接定义过，你就仍可以对它和它下属的键名赋值。&lt;/p>
&lt;pre tabindex="0">&lt;code># 这使“fruit”键作为表存在。
fruit.apple.smooth = true
# 所以接下来你可以像中这样对“fruit”表添加内容：
fruit.orange = 2
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 以下是非法的
# 这将 fruit.apple 的值定义为一个整数。
fruit.apple = 1
# 但接下来这将 fruit.apple 像表一样对待了。
# 整数不能变成表。
fruit.apple.smooth = true
&lt;/code>&lt;/pre>&lt;p>不鼓励跳跃式地定义点分隔键。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 合法但不鼓励&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;水果&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;水果&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">skin&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;薄&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">skin&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;厚&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;红&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;橙&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 建议&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;水果&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">skin&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;薄&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;红&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;水果&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">skin&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;厚&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">orange&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;红&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于裸键可以仅由 ASCII 整数组成，所以可能写出看起来像浮点数、但实际上是两部分的点分隔键。&lt;br>
除非你有充分的理由（基本不太会），否则不要这样做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3.14159&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;派&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 TOML 对应以下 JSON。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#f92672">&amp;#34;3&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;14159&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;派&amp;#34;&lt;/span> } }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字符串">字符串&lt;/h3>
&lt;p>共有四种方式来表示字符串：基本字符串、多行基本字符串、字面量和多行字面量。&lt;br>
所有字符串都只能包含有效的 UTF-8 字符。&lt;/p>
&lt;p>&lt;strong>基本字符串&lt;/strong>由引号（&lt;code>&amp;quot;&lt;/code>）包裹。&lt;br>
任何 Unicode 字符都可以使用，除了那些必须转义的：引号，反斜杠，以及除制表符外的控制字符（U+0000 至 U+0008，U+000A 至 U+001F，U+007F）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;我是一个字符串。\&amp;#34;你可以把我引起来\&amp;#34;。姓名\tJos\u00E9\n位置\t旧金山。&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便，一些流行的字符有其简便转义写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>\b - backspace (U+0008)
\t - tab (U+0009)
\n - linefeed (U+000A)
\f - form feed (U+000C)
\r - carriage return (U+000D)
\&amp;#34; - quote (U+0022)
\\ - backslash (U+005C)
\uXXXX - unicode (U+XXXX)
\UXXXXXXXX - unicode (U+XXXXXXXX)
&lt;/code>&lt;/pre>&lt;p>任何 Unicode 字符都可以用 &lt;code>\uXXXX&lt;/code> 或 &lt;code>\UXXXXXXXX&lt;/code> 的形式来转义。&lt;br>
转义码必须是有效的 Unicode &lt;a href="https://unicode.org/glossary/#unicode_scalar_value">标量值&lt;/a>。&lt;/p>
&lt;p>所有上面未列出的其它转义序列都是保留的；如果用了，TOML 应当产生错误。&lt;/p>
&lt;p>有时你需要表示一小篇文本（例如译文）或者想要对非常长的字符串进行折行。&lt;br>
TOML 对此进行了简化。&lt;/p>
&lt;p>&lt;strong>多行基本字符串&lt;/strong>由三个引号包裹，允许折行。&lt;br>
紧随开头引号的那个换行会被去除。&lt;br>
其它空白和换行会被原样保留。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str1&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Roses are red
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Violets are blue&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>TOML 解析器可以相对灵活地解析成对所在平台有效的换行字符。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Unix 系统，上面的多行字符串可能等同于：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str2&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Roses are red\nViolets are blue&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在 Windows 系统，它可能等价于：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str3&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Roses are red\r\nViolets are blue&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>想书写长字符串却不想引入无关空白，可以用“行末反斜杠”。&lt;br>
当一行的最后一个非空白字符是未被转义的 &lt;code>\&lt;/code> 时，它会连同它后面的所有空白（包括换行）一起被去除，直到下一个非空白字符或结束引号为止。&lt;br>
所有对基本字符串有效的转义序列，对多行基本字符串也同样适用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 下列字符串的每一个字节都完全相同：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str1&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;The quick brown fox jumps over the lazy dog.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str2&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">The quick brown \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fox jumps over \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> the lazy dog.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str3&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> The quick brown \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fox jumps over \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> the lazy dog.\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>任何 Unicode 字符都可以使用，除了那些必须被转义的：反斜杠和除制表符、换行符、回车符外的控制字符（U+0000 至 U+0008，U+000B，U+000C，U+000E 至 U+001F，U+007F）。&lt;/p>
&lt;p>你可以在多行基本字符串内的任何地方写一个引号或两个毗连的引号。&lt;br>
它们也可以写在紧邻界分符内的位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str4&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;这有两个引号：&amp;#34;&amp;#34;。够简单。&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># str5 = &amp;#34;&amp;#34;&amp;#34;这有两个引号：&amp;#34;&amp;#34;&amp;#34;。&amp;#34;&amp;#34;&amp;#34; # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str5&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;这有三个引号：&amp;#34;&amp;#34;\&amp;#34;。&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str6&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;这有十五个引号：&amp;#34;&amp;#34;\&amp;#34;&amp;#34;&amp;#34;\&amp;#34;&amp;#34;&amp;#34;\&amp;#34;&amp;#34;&amp;#34;\&amp;#34;&amp;#34;&amp;#34;\&amp;#34;。&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;#34;这，&amp;#34;她说，&amp;#34;只是个无意义的条款。&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str7&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">这，&lt;/span>&lt;span style="color:#e6db74">&amp;#34;她说，&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">只是个无意义的条款。&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你常常要指定 Windows 路径或正则表达式，那么必须转义反斜杠就马上成为啰嗦而易错的了。&lt;br>
为了帮助搞定这点，TOML 支持字面量字符串，它完全不允许转义。&lt;/p>
&lt;p>&lt;strong>字面量字符串&lt;/strong>由单引号包裹。&lt;br>
类似于基本字符串，他们只能表现为单行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 所见即所得。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">winpath&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;C:\Users\nodejs\templates&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">winpath2&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;\\ServerX\admin$\system32\&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">quoted = &amp;#39;&lt;/span>&lt;span style="color:#a6e22e">Tom&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Dubs&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Preston-Werner&lt;/span>&lt;span style="color:#e6db74">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">regex = &amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;\&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*\&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于没有转义，无法在由单引号包裹的字面量字符串中写入单引号。&lt;br>
万幸，TOML 支持一种多行版本的字面量字符串来解决这个问题。&lt;/p>
&lt;p>&lt;strong>多行字面量字符串&lt;/strong>两侧各有三个单引号来包裹，允许换行。&lt;br>
类似于字面量字符串，无论任何转义都不存在。&lt;br>
紧随开始标记的那个换行会被剔除。&lt;br>
开始结束标记之间的所有其它内容会原样对待。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">regex2&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;I [dw]on&amp;#39;&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">need&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>{&lt;span style="color:#ae81ff">2&lt;/span>} &lt;span style="color:#a6e22e">apples&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">lines = &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">原始字符串中的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">第一个换行被剔除了。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">所有其它空白&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">都保留了。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以在多行字面量字符串中的任何位置写一个或两个单引号，但三个以上的单引号序列不可以。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">quot15&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;这有十五个引号：&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># apos15 = &amp;#39;&amp;#39;&amp;#39;这有十五个撇号：&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39; # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apos15&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;这有十五个撇号：&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;#39;那，&amp;#39;她说，&amp;#39;仍然没有意义。&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">那，&lt;/span>&lt;span style="color:#e6db74">&amp;#39;她说，&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">仍然没有意义。&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除制表符以外的所有控制字符都不允许出现在字面量字符串中。&lt;br>
因此，对于二进制数据，建议你使用 Base64 或其它合适的 ASCII 或 UTF-8 编码。&lt;br>
对那些编码的处理方式，将交由应用程序自己来确定。&lt;/p>
&lt;h3 id="整数">整数&lt;/h3>
&lt;p>整数是纯数字。&lt;br>
正数可以有加号前缀。&lt;br>
负数的前缀是减号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int1&lt;/span> = &lt;span style="color:#ae81ff">+99&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int2&lt;/span> = &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int3&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int4&lt;/span> = &lt;span style="color:#ae81ff">-17&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于大数，你可以在数字之间用下划线来增强可读性。&lt;br>
每个下划线两侧必须至少有一个数字。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int5&lt;/span> = &lt;span style="color:#ae81ff">1_000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int6&lt;/span> = &lt;span style="color:#ae81ff">5_349_221&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int7&lt;/span> = &lt;span style="color:#ae81ff">53_49_221&lt;/span> &lt;span style="color:#75715e"># 印度记数体系分组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">int8&lt;/span> = &lt;span style="color:#ae81ff">1_2_3_4_5&lt;/span> &lt;span style="color:#75715e"># 合法但不鼓励&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前导零是不允许的。&lt;br>
整数值 &lt;code>-0&lt;/code> 与 &lt;code>+0&lt;/code> 是有效的，并等同于无前缀的零。&lt;/p>
&lt;p>非负整数值也可以用十六进制、八进制或二进制来表示。&lt;br>
在这些格式中，&lt;code>+&lt;/code> 不被允许，而（前缀后的）前导零是允许的。&lt;br>
十六进制值大小写不敏感。&lt;br>
数字间的下划线是允许的（但不能存在于前缀和值之间）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带有 `0x` 前缀的十六进制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">hex1&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">xDEADBEEF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">hex2&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">xdeadbeef&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">hex3&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">xdead_beef&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带有 `0o` 前缀的八进制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">oct1&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o01234567&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">oct2&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o755&lt;/span> &lt;span style="color:#75715e"># 对于表示 Unix 文件权限很有用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 带有 `0b` 前缀的二进制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bin1&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">b11010110&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>任何 64 位有符号整数（从 −2^63 到 2^63−1）都应当被接受并无损处理。&lt;br>
如果无法无损表现某个整数，则必须抛出错误。&lt;/p>
&lt;h3 id="浮点数">浮点数&lt;/h3>
&lt;p>浮点数应当被实现为 IEEE 754 binary64 值。&lt;/p>
&lt;p>一个浮点数由一个整数部分（遵从与十进制整数值相同的规则）后跟上一个小数部分和/或一个指数部分组成。&lt;br>
如果小数部分和指数部分兼有，那小数部分必须在指数部分前面。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 小数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt1&lt;/span> = &lt;span style="color:#ae81ff">+1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt2&lt;/span> = &lt;span style="color:#ae81ff">3.1415&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt3&lt;/span> = &lt;span style="color:#ae81ff">-0.01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 指数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt4&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">e&lt;/span>&lt;span style="color:#ae81ff">+22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt5&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">e06&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt6&lt;/span> = &lt;span style="color:#ae81ff">-2&lt;/span>&lt;span style="color:#a6e22e">E-2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 都有&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt7&lt;/span> = &lt;span style="color:#ae81ff">6.626&lt;/span>&lt;span style="color:#a6e22e">e-34&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>小数部分是一个小数点后跟一个或多个数字。&lt;/p>
&lt;p>一个指数部分是一个 E（大小写均可）后跟一个整数部分（遵从与十进制整数值相同的规则，但可以包含前导零）。&lt;/p>
&lt;p>小数点，如果有用到的话，每侧必须紧邻至少一个数字。&lt;/p>
&lt;pre tabindex="0">&lt;code># 非法的浮点数
invalid_float_1 = .7
invalid_float_2 = 7.
invalid_float_3 = 3.e+20
&lt;/code>&lt;/pre>&lt;p>与整数相似，你可以使用下划线来增强可读性。&lt;br>
每个下划线必须被至少一个数字围绕。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">flt8&lt;/span> = &lt;span style="color:#ae81ff">224_617.445&lt;/span>&lt;span style="color:#a6e22e">_991_228&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>浮点数值 &lt;code>-0.0&lt;/code> 与 &lt;code>+0.0&lt;/code> 是有效的，并且应当遵从 IEEE 754。&lt;/p>
&lt;p>特殊浮点值也能够表示。&lt;br>
它们是小写的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 无穷&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf1&lt;/span> = &lt;span style="color:#a6e22e">inf&lt;/span> &lt;span style="color:#75715e"># 正无穷&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf2&lt;/span> = &lt;span style="color:#960050;background-color:#1e0010">+&lt;/span>&lt;span style="color:#a6e22e">inf&lt;/span> &lt;span style="color:#75715e"># 正无穷&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf3&lt;/span> = &lt;span style="color:#a6e22e">-inf&lt;/span> &lt;span style="color:#75715e"># 负无穷&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 非数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf4&lt;/span> = &lt;span style="color:#a6e22e">nan&lt;/span> &lt;span style="color:#75715e"># 实际上对应信号非数码还是静默非数码，取决于实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf5&lt;/span> = &lt;span style="color:#960050;background-color:#1e0010">+&lt;/span>&lt;span style="color:#a6e22e">nan&lt;/span> &lt;span style="color:#75715e"># 等同于 `nan`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sf6&lt;/span> = &lt;span style="color:#a6e22e">-nan&lt;/span> &lt;span style="color:#75715e"># 有效，实际码取决于实现&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="布尔值">布尔值&lt;/h3>
&lt;p>布尔值就是你所惯用的那样。&lt;br>
要小写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bool1&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bool2&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="坐标日期时刻">坐标日期时刻&lt;/h3>
&lt;p>要准确地表示世上的一个特定时间，你可以使用指定了时区偏移量的 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 格式的日期时刻。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">odt1&lt;/span> = &lt;span style="color:#e6db74">1979-05-27T07:32:00Z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">odt2&lt;/span> = &lt;span style="color:#e6db74">1979-05-27T00:32:00-07:00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">odt3&lt;/span> = &lt;span style="color:#ae81ff">1979-05-27&lt;/span>&lt;span style="color:#a6e22e">T00&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00.999999&lt;/span>&lt;span style="color:#ae81ff">-07&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>出于可读性的目的，你可以用一个空格字符替代日期和时刻之间的 T（RFC 3339 的第 5.6 节中允许了这样做）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">odt4&lt;/span> = &lt;span style="color:#ae81ff">1979-05-27&lt;/span> &lt;span style="color:#ae81ff">07&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>&lt;span style="color:#a6e22e">Z&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>毫秒级的精度是必须的。&lt;br>
更高精度的小数秒取决于实现。&lt;br>
如果它的值超出了实现所支持的精度，那超出的部分必须被舍弃，而不能四舍五入。&lt;/p>
&lt;h3 id="各地日期时刻">各地日期时刻&lt;/h3>
&lt;p>如果你省略了 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 日期时刻中的时区偏移量，这表示该日期时刻的使用并不涉及时区偏移。&lt;br>
在没有其它信息的情况下，并不知道它究竟该被转化成世上的哪一刻。&lt;br>
如果仍被要求转化，那结果将取决于实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ldt1&lt;/span> = &lt;span style="color:#ae81ff">1979-05-27&lt;/span>&lt;span style="color:#a6e22e">T07&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ldt2&lt;/span> = &lt;span style="color:#ae81ff">1979-05-27&lt;/span>&lt;span style="color:#a6e22e">T00&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00.999999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>毫秒级的精度是必须的。&lt;br>
更高精度的小数秒取决于实现。&lt;br>
如果它的值超出了实现所支持的精度，那多余的部分必须被舍弃，而不能四舍五入。&lt;/p>
&lt;h3 id="各地日期">各地日期&lt;/h3>
&lt;p>如果你只写了 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 日期时刻中的日期部分，那它表示一整天，同时也不涉及时区偏移。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ld1&lt;/span> = &lt;span style="color:#ae81ff">1979-05-27&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="各地时刻">各地时刻&lt;/h3>
&lt;p>如果你只写了 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 日期时刻中的时刻部分，它将只表示一天之中的那个时刻，而与任何特定的日期无关、亦不涉及时区偏移。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lt1&lt;/span> = &lt;span style="color:#ae81ff">07&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lt2&lt;/span> = &lt;span style="color:#ae81ff">00&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">00.999999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>毫秒级的精度是必须的。&lt;br>
更高精度的小数秒取决于实现。&lt;br>
如果它的值超出了实现所支持的精度，那多余的部分必须被舍弃，而不能四舍五入。&lt;/p>
&lt;h3 id="数组">数组&lt;/h3>
&lt;p>数组是内含值的方括号。&lt;br>
空白会被忽略。&lt;br>
子元素由逗号分隔。&lt;br>
数组可以包含与键值对所允许的相同数据类型的值。&lt;br>
可以混合不同类型的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">integers&lt;/span> = [ &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">colors&lt;/span> = [ &lt;span style="color:#e6db74">&amp;#34;红&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;黄&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;绿&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">nested_array_of_ints&lt;/span> = [ [ &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> ], [&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>] ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">nested_mixed_array&lt;/span> = [ [ &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> ], [&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>] ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">string_array&lt;/span> = [ &lt;span style="color:#e6db74">&amp;#34;所有的&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;字符串&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;是相同的&amp;#34;&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;类型&amp;#39;&amp;#39;&amp;#39;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 允许混合类型的数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">numbers&lt;/span> = [ &lt;span style="color:#ae81ff">0.1&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">contributors&lt;/span> = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Foo Bar &amp;lt;foo@example.com&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Baz Qux&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">email&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;bazqux@example.com&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://example.com/bazqux&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>数组可以跨行。&lt;br>
数组的最后一个值后面可以有终逗号（也称为尾逗号）。&lt;br>
值、逗号、结束括号前可以存在任意数量的换行和注释。&lt;br>
数组值和逗号之间的缩进被作为空白对待而被忽略。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">integers2&lt;/span> = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">integers3&lt;/span> = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#75715e"># 这是可以的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="表">表&lt;/h3>
&lt;p>表（也被称为哈希表或字典）是键值对的集合。&lt;br>
它们由表头定义，连同方括号作为单独的行出现。&lt;br>
看得出表头不同于数组，因为数组只有值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">table&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在它下方，直至下一个表头或文件结束，都是这个表的键值对。&lt;br>
表不保证保持键值对的指定顺序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">table-1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key1&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;some string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key2&lt;/span> = &lt;span style="color:#ae81ff">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">table-2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key1&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;another string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">key2&lt;/span> = &lt;span style="color:#ae81ff">456&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表名的规则与键名相同（见前文&lt;a href="#%E9%94%AE%E5%90%8D">键名&lt;/a>定义）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#e6db74">&amp;#34;tater.man&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;pug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等价于 JSON 的如下结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#f92672">&amp;#34;dog&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;tater.man&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pug&amp;#34;&lt;/span> } } } }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>键名周围的空格会被忽略。&lt;br>
然而，最佳实践还是不要有任何多余的空白。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span>] &lt;span style="color:#75715e"># 这是最佳实践&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ &lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">f&lt;/span> ] &lt;span style="color:#75715e"># 等同于 [d.e.f]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ &lt;span style="color:#a6e22e">g&lt;/span> . &lt;span style="color:#a6e22e">h&lt;/span> . &lt;span style="color:#a6e22e">i&lt;/span> ] &lt;span style="color:#75715e"># 等同于 [g.h.i]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ &lt;span style="color:#a6e22e">j&lt;/span> . &lt;span style="color:#e6db74">&amp;#34;ʞ&amp;#34;&lt;/span> . &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span> ] &lt;span style="color:#75715e"># 等同于 [j.&amp;#34;ʞ&amp;#34;.&amp;#39;l&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>缩进被作为空白对待而被忽略。&lt;/p>
&lt;p>你不必层层完整地写出你不想写的所有途径的父表。&lt;br>
TOML 知道该怎么办。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [x] 你&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [x.y] 不&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [x.y.z] 需要这些&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">x&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span>.&lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">w&lt;/span>] &lt;span style="color:#75715e"># 来让这生效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">x&lt;/span>] &lt;span style="color:#75715e"># 后置父表定义是可以的&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>空表是允许的，只要里面没有键值对就行了。&lt;/p>
&lt;p>类似于键名，你不能重复定义一个表。&lt;br>
这样做是非法的。&lt;/p>
&lt;pre tabindex="0">&lt;code># 不要这样做
[fruit]
apple = &amp;#34;红&amp;#34;
[fruit]
orange = &amp;#34;橙&amp;#34;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 也不要这样做
[fruit]
apple = &amp;#34;红&amp;#34;
[fruit.apple]
texture = &amp;#34;光滑&amp;#34;
&lt;/code>&lt;/pre>&lt;p>不鼓励无序地定义表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 有效但不鼓励&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">apple&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">animal&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">orange&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 推荐&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">apple&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">orange&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">animal&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>顶层表，又被称为根表，于文档开始处开始并在第一个表头（或文件结束处）前结束。&lt;br>
不同于其它表，它没有名字且无法后置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 顶层表开始。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Fido&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">breed&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;pug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 顶层表结束。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">owner&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Regina Dogman&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">member_since&lt;/span> = &lt;span style="color:#ae81ff">1999-08-04&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>点分隔键为最后一个键名前的每个键名创建并定义一个表，倘若这些表尚未被创建的话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个名为 fruit 的表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个名为 fruit.apple 的表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">taste&lt;/span>.&lt;span style="color:#a6e22e">sweet&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 定义一个名为 fruit.apple.taste 的表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fruit 和 fruit.apple 已经创建过了&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于表不能定义多于一次，不允许使用 &lt;code>[table]&lt;/code> 头重定义这样的表。&lt;br>
同样地，使用点分隔键来重定义已经以 &lt;code>[table]&lt;/code> 形式定义过的表也是不允许的。&lt;br>
不过，&lt;code>[table]&lt;/code> 形式可以被用来定义通过点分隔键定义的表中的子表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;红&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">taste&lt;/span>.&lt;span style="color:#a6e22e">sweet&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [fruit.apple] # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [fruit.apple.taste] # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruit&lt;/span>.&lt;span style="color:#a6e22e">apple&lt;/span>.&lt;span style="color:#a6e22e">texture&lt;/span>] &lt;span style="color:#75715e"># 你可以添加子表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">smooth&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="内联表">内联表&lt;/h3>
&lt;p>内联表提供了一种更为紧凑的语法来表示表。&lt;br>
对于否则就很啰嗦的成组数据，这尤其有用。&lt;br>
内联表被完整地定义在花括号之中：&lt;code>{&lt;/code> 和 &lt;code>}&lt;/code>。&lt;br>
括号中，可以出现零或更多个以逗号分隔的键值对。&lt;br>
键值对采取与标准表中的键值对相同的形式。&lt;br>
什么类型的值都可以，包括内联表。&lt;/p>
&lt;p>内联表得出现在同一行内。&lt;br>
内联表中，最后一对键值对后不允许终逗号（也称为尾逗号）。&lt;br>
不允许花括号中出现任何换行，除非在值中它们合法。&lt;br>
即便如此，也强烈不建议把一个内联表搞成纵跨多行的样子。&lt;br>
如果你发现自己真的需要，那意味着你应该使用标准表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = { &lt;span style="color:#a6e22e">first&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Tom&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Preston-Werner&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">point&lt;/span> = { &lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">animal&lt;/span> = { &lt;span style="color:#a6e22e">type&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;pug&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述内联表等同于下面的标准表定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">name&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">first&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Tom&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">last&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Preston-Werner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">point&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">animal&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;pug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内联表是独立自足的，在内部定义全部的键与子表。&lt;br>
不能在括号以外的地方，再添加键与子表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">product&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span> = { &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Nail&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># type.edible = false # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似地，内联表不能被用于向一个已定义的表添加键或子表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">product&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Nail&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># type = { edible = false } # 非法&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="表数组">表数组&lt;/h3>
&lt;p>最后一个还没讲到的语法允许你写表数组。&lt;br>
这可以通过把表名写在双方括号里的表头来表示。&lt;br>
表头的第一例定义了这个数组及其首个表元素，而后续的每个则在该数组中创建并定义一个新的表元素。&lt;br>
这些表按出现顺序插入该数组。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">products&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Hammer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sku&lt;/span> = &lt;span style="color:#ae81ff">738594937&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">products&lt;/span>]] &lt;span style="color:#75715e"># 数组里的空表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">products&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Nail&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sku&lt;/span> = &lt;span style="color:#ae81ff">284758393&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;gray&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等价于 JSON 的如下结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;products&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hammer&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;sku&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">738594937&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Nail&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;#34;sku&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">284758393&lt;/span>, &lt;span style="color:#f92672">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;gray&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>任何对表数组的引用都指向该数组里最近定义的表元素。&lt;br>
这允许你在最近的表内定义子表，甚至子表数组。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">fruits&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;apple&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">physical&lt;/span>] &lt;span style="color:#75715e"># 子表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">color&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">shape&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;round&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">varieties&lt;/span>]] &lt;span style="color:#75715e"># 嵌套表数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;red delicious&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">varieties&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;granny smith&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">fruits&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">varieties&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;plantain&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述 TOML 等价于 JSON 的如下结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fruits&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;apple&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;physical&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;shape&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;round&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;varieties&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;red delicious&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;granny smith&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;varieties&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;plantain&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一个表或表数组的父级是一个数组元素，该元素必须在定义子级前先定义。&lt;br>
顺序颠倒的行为，必须在解析时报错。&lt;/p>
&lt;pre tabindex="0">&lt;code># 非法的 TOML 文档
[fruit.physical] # 子表，但它应该隶属于哪个父元素？
color = &amp;#34;red&amp;#34;
shape = &amp;#34;round&amp;#34;
[[fruit]] # 解析器必须在发现“fruit”是数组而非表时抛出错误
name = &amp;#34;apple&amp;#34;
&lt;/code>&lt;/pre>&lt;p>若试图向一个静态定义的数组追加内容，即便数组尚且为空，也必须在解析时报错。&lt;/p>
&lt;pre tabindex="0">&lt;code># 非法的 TOML 文档
fruits = []
[[fruits]] # 不允许
&lt;/code>&lt;/pre>&lt;p>若试图用已经确定为数组的名称定义表，必须在解析时报错。&lt;br>
将数组重定义为普通表的行为，也必须在解析时报错。&lt;/p>
&lt;pre tabindex="0">&lt;code># 非法的 TOML 文档
[[fruits]]
name = &amp;#34;apple&amp;#34;
[[fruits.varieties]]
name = &amp;#34;red delicious&amp;#34;
# 非法：该表与之前的表数组相冲突
[fruits.varieties]
name = &amp;#34;granny smith&amp;#34;
[fruits.physical]
color = &amp;#34;red&amp;#34;
shape = &amp;#34;round&amp;#34;
# 非法：该表数组与之前的表相冲突
[[fruits.physical]]
color = &amp;#34;green&amp;#34;
&lt;/code>&lt;/pre>&lt;p>你也可以适当使用内联表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">points&lt;/span> = [ { &lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#a6e22e">z&lt;/span> = &lt;span style="color:#ae81ff">3&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#a6e22e">z&lt;/span> = &lt;span style="color:#ae81ff">9&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">x&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> = &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">z&lt;/span> = &lt;span style="color:#ae81ff">8&lt;/span> } ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="文件扩展名">文件扩展名&lt;/h3>
&lt;p>TOML 文件应当使用 &lt;code>.toml&lt;/code> 扩展名。&lt;/p>
&lt;h3 id="mime-类型">MIME 类型&lt;/h3>
&lt;p>在互联网上传输 TOML 文件时，恰当的 MIME 类型是 &lt;code>application/toml&lt;/code>。&lt;/p>
&lt;h3 id="abnf-语法">ABNF 语法&lt;/h3>
&lt;p>TOML 语法的严谨说明，由一个 &lt;a href="https://github.com/toml-lang/toml/blob/1.0.0/toml.abnf">ABNF 文件&lt;/a>另行提供。&lt;/p></description></item><item><title>Rust 学习指南</title><link>https://blog.baicai.me/article/2021/learn_rust/</link><pubDate>Sat, 05 Jun 2021 02:16:24 +0800</pubDate><guid>https://blog.baicai.me/article/2021/learn_rust/</guid><description>&lt;h2 id="了解">了解&lt;/h2>
&lt;p>一般来说，要决定学习一门新语言之前，会先大体了解下这门语言的特点和目前的发展情况。
这时，建议看 Rust 官网 &lt;a href="https://rust-lang.org">https://rust-lang.org&lt;/a>&lt;/p>
&lt;h2 id="rust-官方文档">Rust 官方文档&lt;/h2>
&lt;p>Rust 语言的学习或参考文档大都列在 &lt;a href="https://www.rust-lang.org/learn">&lt;strong>Rust 学习指引页&lt;/strong>&lt;/a> 和 &lt;a href="https://doc.rust-lang.org/">&lt;strong>Rust 官方文档主页&lt;/strong>&lt;/a> 上，目前 Rust 官方团队已经将相关文档拆分到不同的仓库上：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/book/">《Rust 程序设计语言》（The Rust Programming Language）&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/book">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/">《通过例子学 Rust》（Rust by Example）&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rust-by-example">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/edition-guide/index.html">Rust 版本指南（The Edition Guide）&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/edition-guide">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/cargo/index.html">Cargo 帮助文档&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/cargo/tree/master/src/doc/src">GitHub 仓库源文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/rustdoc/index.html">rustdoc 帮助文档&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc">GitHub 仓库源文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/rustc/index.html">rustc 帮助文档&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rust/tree/master/src/doc/rustc">GitHub 仓库源文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/error-index.html">Rust 编译错误索引&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rust/blob/master/src/librustc_mir/error_codes.rs">GitHub 仓库源代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/reference/index.html">《Rust 语言参考》（The Rust Reference）&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/reference">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nomicon/">The Rustonomicon&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/nomicon">GitHub 仓库&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>还有其他更多官方或其他非官方相关的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rust-lang-nursery.github.io/cli-wg/">使用 Rust 编写命令行应用&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/cli-wg">GitHub 仓库地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rustwasm.github.io/docs/book/">Rust 和 WebAssembly 教程（WebAssembly Book）&lt;/a>，对应 &lt;a href="https://github.com/rustwasm/book">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-embedded.github.io/book/">嵌入式 Rust 教程&lt;/a>，对应 &lt;a href="https://github.com/rust-embedded/book">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-lang-nursery.github.io/rust-cookbook/">A Rust Cookbook&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/rust-cookbook">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://doc.rust-lang.org/nightly/unstable-book/">The Unstable Book&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rust/tree/master/src/doc/unstable-book">GitHub 仓库源代码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-lang.github.io/rustc-guide/">rustc 指引——Rust 编译器的工作原理及如何参与贡献（rustc-guide）&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rustc-guide">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/rustup.rs">rustup 命令说明&lt;/a>，本翻译项目会将 &lt;code>rustup&lt;/code> 的相关说明翻译成中文&lt;/li>
&lt;li>&lt;a href="https://rust-lang.github.io/rfcs/">Rust RFC——Rust 发展相关制定的文稿&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/rfcs">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-lang-nursery.github.io/mdBook/">mdBook 使用手册&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/mdBook">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-lang-nursery.github.io/api-guidelines/">Rust API 指导原则&lt;/a>，对应 &lt;a href="https://github.com/rust-lang-nursery/api-guidelines">GitHub 仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rust-lang.github.io/async-book/">async-book&lt;/a>，对应 &lt;a href="https://github.com/rust-lang/async-book">GitHub 仓库&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上述文档的源文件有些是放在 &lt;a href="https://github.com/rust-lang/rust">rust&lt;/a> 和 &lt;a href="https://github.com/rust-lang/cargo">cargo&lt;/a> 的仓库的子目录中：&lt;a href="https://github.com/rust-lang/rust/tree/master/src/doc">Rust 文档&lt;/a> 和 &lt;a href="https://github.com/rust-lang/cargo/tree/master/src/doc">cargo 文档&lt;/a>。&lt;/p>
&lt;h2 id="rust-资源">Rust 资源&lt;/h2>
&lt;p>Rust 相关的中文资源，包括网站，或者国内的 Rust 的文章或书籍。&lt;/p>
&lt;h3 id="rust-相关的中文网站">Rust 相关的中文网站&lt;/h3>
&lt;blockquote>
&lt;p>以下列出目前搜集到的 Rust 中文网站：&lt;/p>
&lt;/blockquote>
&lt;p>Rust 语言中文社区：https://rust.cc/&lt;/p>
&lt;p>Rust Wiki 网：https://rustwiki.org/&lt;/p>
&lt;h2 id="rust-语言术语中英文对照表">Rust 语言术语中英文对照表&lt;/h2>
&lt;p>👉 部分来自 &lt;a href="https://github.com/rust-lang-cn/english-chinese-glossary-of-rust">Rust 语言术语中英文对照表&lt;/a>仓库，收录在此处，只是方便 Rust 学习者统一查阅，若是发现有任何错误或需要完善地方，请在原仓库指出或修改错误。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>English 英文&lt;/th>
&lt;th>Chinese 中文&lt;/th>
&lt;th>Note 备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>A&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abstract Syntax Tree&lt;/td>
&lt;td>抽象语法树&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ABI&lt;/td>
&lt;td>应用程序二进制接口&lt;/td>
&lt;td>Application Binary Interface 缩写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>accumulator&lt;/td>
&lt;td>累加器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>accumulator variable&lt;/td>
&lt;td>累加器变量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ahead-of-time compiled&lt;/td>
&lt;td>预编译&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ahead-of-time compiled language&lt;/td>
&lt;td>预编译语言&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>alias&lt;/td>
&lt;td>别名&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>aliasing&lt;/td>
&lt;td>别名使用&lt;/td>
&lt;td>参见 &lt;a href="https://en.wikipedia.org/wiki/Pointer_aliasing">Wikipedia&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>angle brackets&lt;/td>
&lt;td>尖括号，“&amp;lt;”和“&amp;gt;”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>annotate&lt;/td>
&lt;td>标注，注明（动词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>annotation&lt;/td>
&lt;td>标注，注明（名词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ARC&lt;/td>
&lt;td>原子引用计数器&lt;/td>
&lt;td>Atomic Referecne Counter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>anonymity&lt;/td>
&lt;td>匿名&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>argument&lt;/td>
&lt;td>参数，实参，实际参数&lt;/td>
&lt;td>不严格区分的话， argument（参数）和 &lt;!-- raw HTML omitted --> parameter（参量）可以互换地使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>argument type&lt;/td>
&lt;td>参数类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>assignment&lt;/td>
&lt;td>赋值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>associated functions&lt;/td>
&lt;td>关联函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>associated items&lt;/td>
&lt;td>关联项&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>associated types&lt;/td>
&lt;td>关联类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>asterisk&lt;/td>
&lt;td>星号（*)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>atomic&lt;/td>
&lt;td>原子的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute&lt;/td>
&lt;td>属性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>automated building&lt;/td>
&lt;td>自动构建&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>automated test&lt;/td>
&lt;td>自动测试，自动化测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>B&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>baroque macro&lt;/td>
&lt;td>巴洛克宏&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>benchmark&lt;/td>
&lt;td>基准&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>binary&lt;/td>
&lt;td>二进制的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>binary executable&lt;/td>
&lt;td>二进制的可执行文件&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bind&lt;/td>
&lt;td>绑定&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>block&lt;/td>
&lt;td>语句块，代码块&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean&lt;/td>
&lt;td>布尔型，布尔值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>borrow check&lt;/td>
&lt;td>借用检查&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>borrower&lt;/td>
&lt;td>借用者，借入者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>borrowing&lt;/td>
&lt;td>借用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bound&lt;/td>
&lt;td>约束，限定，限制&lt;/td>
&lt;td>此词和 constraint 意思相近，&lt;!-- raw HTML omitted -->constraint 在 C# 语言中翻译成“约束”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>box&lt;/td>
&lt;td>箱子，盒子，装箱类型&lt;/td>
&lt;td>一般不译，作动词时翻译成“装箱”，&lt;!-- raw HTML omitted -->具有所有权的智能指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boxed&lt;/td>
&lt;td>装箱，装包&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boxing&lt;/td>
&lt;td>装箱，装包&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>brace&lt;/td>
&lt;td>大括号，“{”或“}”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>buffer&lt;/td>
&lt;td>缓冲，缓冲区，缓冲器，缓存&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>build&lt;/td>
&lt;td>构建&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>builder pattern&lt;/td>
&lt;td>创建者模式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>call&lt;/td>
&lt;td>调用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>caller&lt;/td>
&lt;td>调用者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>capacity&lt;/td>
&lt;td>容器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>capture&lt;/td>
&lt;td>捕获&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cargo&lt;/td>
&lt;td>(Rust 包管理器，不译)&lt;/td>
&lt;td>该词作名词时意思是“货物”，&lt;!-- raw HTML omitted -->作动词时意思是“装载货物”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cargo-fy&lt;/td>
&lt;td>Cargo 化，使用 Cargo 创建项目&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>case analysis&lt;/td>
&lt;td>事例分析&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cast&lt;/td>
&lt;td>类型转换，转型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>casting&lt;/td>
&lt;td>类型转换&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chaining method call&lt;/td>
&lt;td>链式方法调用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>channel&lt;/td>
&lt;td>信道，通道&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closure&lt;/td>
&lt;td>闭包&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>coercion&lt;/td>
&lt;td>强制类型转换，强制转换&lt;/td>
&lt;td>coercion 原意是“强制，胁迫”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>collection&lt;/td>
&lt;td>集合&lt;/td>
&lt;td>参见 &lt;a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">Wikipedia&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>combinator&lt;/td>
&lt;td>组合算子，组合器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>comma&lt;/td>
&lt;td>逗号，“,”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>command&lt;/td>
&lt;td>命令&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>command line&lt;/td>
&lt;td>命令行&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>comment&lt;/td>
&lt;td>注释&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compile&lt;/td>
&lt;td>编译（动词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compile time&lt;/td>
&lt;td>编译期，编译期间，编译时&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compilation&lt;/td>
&lt;td>编译（名词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compilation unit&lt;/td>
&lt;td>编译单元&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compiler&lt;/td>
&lt;td>编译器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compiler intrinsics&lt;/td>
&lt;td>编译器固有功能&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compound&lt;/td>
&lt;td>复合（类型，数据）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>concurrency&lt;/td>
&lt;td>并发&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>conditional compilation&lt;/td>
&lt;td>条件编译&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>configuration&lt;/td>
&lt;td>配置&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>constructor&lt;/td>
&lt;td>构造器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>consumer&lt;/td>
&lt;td>消费者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>container&lt;/td>
&lt;td>容器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>container type&lt;/td>
&lt;td>容器类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>convert&lt;/td>
&lt;td>转换，转化，转&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>copy&lt;/td>
&lt;td>复制，拷贝&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>crate&lt;/td>
&lt;td>包，包装箱，装包&lt;/td>
&lt;td>一般不译，crate 是 Rust 的基本编译单元&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>curly braces&lt;/td>
&lt;td>大括号，包含“{”和“}”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>custom type&lt;/td>
&lt;td>自定义类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>D&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dangling pointer&lt;/td>
&lt;td>悬垂指针&lt;/td>
&lt;td>use after free 在释放后使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data race&lt;/td>
&lt;td>数据竞争&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dead code&lt;/td>
&lt;td>死代码，无效代码，不可达代码&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deallocate&lt;/td>
&lt;td>释放，重新分配&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>declare&lt;/td>
&lt;td>声明&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deep copy&lt;/td>
&lt;td>深拷贝，深复制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dependency&lt;/td>
&lt;td>依赖&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deref coercions&lt;/td>
&lt;td>强制多态&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dereference&lt;/td>
&lt;td>解引用&lt;/td>
&lt;td>Rust 文章中有时简写为 Deref&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>derive&lt;/td>
&lt;td>派生&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>designator&lt;/td>
&lt;td>指示符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destruction&lt;/td>
&lt;td>销毁，毁灭&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destructor&lt;/td>
&lt;td>析构器，析构函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destructure&lt;/td>
&lt;td>解构&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destructuring&lt;/td>
&lt;td>解构，解构赋值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>desugar&lt;/td>
&lt;td>脱糖&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>diverge function&lt;/td>
&lt;td>发散函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>device drive&lt;/td>
&lt;td>设备驱动&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>directory&lt;/td>
&lt;td>目录&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dispatch&lt;/td>
&lt;td>分发&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>diverging functions&lt;/td>
&lt;td>发散函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>documentation&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dot operator&lt;/td>
&lt;td>点运算符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DST&lt;/td>
&lt;td>动态大小类型&lt;/td>
&lt;td>dynamic sized type，一般不译，&lt;!-- raw HTML omitted -->使用英文缩写形式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dynamic language&lt;/td>
&lt;td>动态类型语言&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dynamic trait type&lt;/td>
&lt;td>动态特质类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>E&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>enumeration&lt;/td>
&lt;td>枚举&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>encapsulation&lt;/td>
&lt;td>封装&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>equality test&lt;/td>
&lt;td>相等测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>elision&lt;/td>
&lt;td>省略&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exhaustiveness checking&lt;/td>
&lt;td>穷尽性检查，无遗漏检查&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>expression&lt;/td>
&lt;td>表达式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>expression-oriented language&lt;/td>
&lt;td>面向表达式的语言&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>explicit&lt;/td>
&lt;td>显式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>explicit discriminator&lt;/td>
&lt;td>显式的辨别值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>explicit type conversion&lt;/td>
&lt;td>显式类型转换&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extension&lt;/td>
&lt;td>扩展名&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extern&lt;/td>
&lt;td>外，外部&lt;/td>
&lt;td>作关键字时不译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>F&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fat pointer&lt;/td>
&lt;td>胖指针&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>feature gate&lt;/td>
&lt;td>功能开关&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>field&lt;/td>
&lt;td>字段&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>field-level mutability&lt;/td>
&lt;td>字段级别可变性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>file&lt;/td>
&lt;td>文件&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fmt&lt;/td>
&lt;td>格式化，是 format 的缩写&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>formatter&lt;/td>
&lt;td>格式化程序，格式化工具，格式器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>floating-point number&lt;/td>
&lt;td>浮点数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>flow control&lt;/td>
&lt;td>流程控制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Foreign Function Interface（FFI）&lt;/td>
&lt;td>外部语言函数接口&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fragment specifier&lt;/td>
&lt;td>片段分类符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>free variables&lt;/td>
&lt;td>自由变量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>freeze&lt;/td>
&lt;td>冻结&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>function&lt;/td>
&lt;td>函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>function declaration&lt;/td>
&lt;td>函数声明&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>functional&lt;/td>
&lt;td>函数式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>G&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>garbage collector&lt;/td>
&lt;td>垃圾回收&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>generalize&lt;/td>
&lt;td>泛化，泛型化&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>generator&lt;/td>
&lt;td>生成器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>generic&lt;/td>
&lt;td>泛型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>generic type&lt;/td>
&lt;td>泛型类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>growable&lt;/td>
&lt;td>可增长的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>guard&lt;/td>
&lt;td>守卫&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>H&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>handle error&lt;/td>
&lt;td>句柄错误&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hash&lt;/td>
&lt;td>哈希，哈希值，散列&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hash map&lt;/td>
&lt;td>散列映射，哈希表&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>heap&lt;/td>
&lt;td>堆&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hierarchy&lt;/td>
&lt;td>层次，分层，层次结构&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>higher rank lifetime&lt;/td>
&lt;td>高阶生命周期&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>higher rank trait bound&lt;/td>
&lt;td>高阶特质约束&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>higher tank type&lt;/td>
&lt;td>高阶类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hygiene&lt;/td>
&lt;td>卫生&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hygienic macro system&lt;/td>
&lt;td>卫生宏系统&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>I&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ICE&lt;/td>
&lt;td>编译内部错误&lt;/td>
&lt;td>internal comppiler error 的缩写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>immutable&lt;/td>
&lt;td>不可变的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implement&lt;/td>
&lt;td>实现&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implementor&lt;/td>
&lt;td>实现者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implicit&lt;/td>
&lt;td>隐式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implicit discriminator&lt;/td>
&lt;td>隐式的辨别值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implicit type conversion&lt;/td>
&lt;td>隐式类型转换&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>import&lt;/td>
&lt;td>导入&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in assignment&lt;/td>
&lt;td>在赋值（语句）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>index&lt;/td>
&lt;td>索引&lt;/td>
&lt;td>英语复数形式：indices&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>infer&lt;/td>
&lt;td>推导（动词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>inference&lt;/td>
&lt;td>推导（名词）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>inherited mutability&lt;/td>
&lt;td>承袭可变性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>inheritance&lt;/td>
&lt;td>继承&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>integrated development &lt;!-- raw HTML omitted -->environment(IDE)&lt;/td>
&lt;td>集成开发环境&lt;/td>
&lt;td>中文著作中通常直接写成 IDE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>integration-style test&lt;/td>
&lt;td>集成测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interior mutability&lt;/td>
&lt;td>内部可变性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>installer&lt;/td>
&lt;td>安装程序，安装器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>instance&lt;/td>
&lt;td>实例&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>instance method&lt;/td>
&lt;td>实例方法&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>integer&lt;/td>
&lt;td>整型，整数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interact&lt;/td>
&lt;td>相互作用，相互影响&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interior mutability&lt;/td>
&lt;td>内部可变性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>intrinsic&lt;/td>
&lt;td>固有的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invoke&lt;/td>
&lt;td>调用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>item&lt;/td>
&lt;td>项，条目，项目&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterate&lt;/td>
&lt;td>重复&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iteration&lt;/td>
&lt;td>迭代&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterator&lt;/td>
&lt;td>迭代器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterator adaptors&lt;/td>
&lt;td>迭代器适配器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterator invalidation&lt;/td>
&lt;td>迭代器失效&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>L&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LHS&lt;/td>
&lt;td>左操作数&lt;/td>
&lt;td>left-hand side 的非正式缩写，&lt;!-- raw HTML omitted -->与 RHS 相对&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lender&lt;/td>
&lt;td>借出者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>library&lt;/td>
&lt;td>库&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lifetime&lt;/td>
&lt;td>生存时间，寿命，生命周期&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lifetime elision&lt;/td>
&lt;td>生命周期省略&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>link&lt;/td>
&lt;td>链接&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>linked-list&lt;/td>
&lt;td>链表&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lint&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>lint 英文本义是“纱布，绒毛”，此词在&lt;!-- raw HTML omitted -->计算机领域中表示程序代码中可疑和&lt;!-- raw HTML omitted -->不具结构性的片段，参见 &lt;a href="https://en.wikipedia.org/wiki/Lint_%28software%29">Wikipedia&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>list&lt;/td>
&lt;td>列表&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>listener&lt;/td>
&lt;td>监听器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>literal&lt;/td>
&lt;td>数据，常量数据，字面值，字面量，&lt;!-- raw HTML omitted -->字面常量，字面上的&lt;/td>
&lt;td>英文意思：字面意义的（内容）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LLVM&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>Low Level Virtual Machine 的缩写，&lt;!-- raw HTML omitted -->是构建编译器的系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop&lt;/td>
&lt;td>循环&lt;/td>
&lt;td>作关键字时不译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>low-level code&lt;/td>
&lt;td>底层代码&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>low-level language&lt;/td>
&lt;td>底层语言&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l-value&lt;/td>
&lt;td>左值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>main function&lt;/td>
&lt;td>main 函数，主函数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>macro&lt;/td>
&lt;td>宏&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>map&lt;/td>
&lt;td>映射&lt;/td>
&lt;td>一般不译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>match guard&lt;/td>
&lt;td>匹配守卫&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>memory&lt;/td>
&lt;td>内存&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>memory leak&lt;/td>
&lt;td>内存泄露&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>memory safe&lt;/td>
&lt;td>内存安全&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>meta&lt;/td>
&lt;td>原则，元&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metadata&lt;/td>
&lt;td>元数据&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metaprogramming&lt;/td>
&lt;td>元编程&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metavariable&lt;/td>
&lt;td>元变量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>method call syntax&lt;/td>
&lt;td>方法调用语法&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>method chaining&lt;/td>
&lt;td>方法链&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>method definition&lt;/td>
&lt;td>方法定义&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>modifier&lt;/td>
&lt;td>修饰符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>module&lt;/td>
&lt;td>模块&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>monomorphization&lt;/td>
&lt;td>单态&lt;/td>
&lt;td>mono: one, morph: form&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>move&lt;/td>
&lt;td>移动，转移&lt;/td>
&lt;td>按照 Rust 所规定的内容，&lt;!-- raw HTML omitted -->英语单词 transfer 的意思&lt;!-- raw HTML omitted -->比 move 更贴合实际描述&lt;!-- raw HTML omitted -->参考：&lt;a href="http://rustwiki.org/rust-by-example/scope/move.html">Rust by Example&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>move semantics&lt;/td>
&lt;td>移动语义&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mutability&lt;/td>
&lt;td>可变性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mutable&lt;/td>
&lt;td>可变&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mutable reference&lt;/td>
&lt;td>可变引用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>multiple bounds&lt;/td>
&lt;td>多重约束&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mutiple patterns&lt;/td>
&lt;td>多重模式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>N&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nest&lt;/td>
&lt;td>嵌套&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nightly Rust&lt;/td>
&lt;td>Rust 开发版&lt;/td>
&lt;td>nightly本意是“每夜，每天晚上”，&lt;!-- raw HTML omitted -->指代码每天都更新&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NLL&lt;/td>
&lt;td>非词法生命周期&lt;/td>
&lt;td>non lexical lifetime 的缩写，&lt;!-- raw HTML omitted -->一般不译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>non-copy type&lt;/td>
&lt;td>非复制类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>non-generic&lt;/td>
&lt;td>非泛型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no-op&lt;/td>
&lt;td>空操作，空运算&lt;/td>
&lt;td>(此词出现在类型转换章节中）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>non-commutative&lt;/td>
&lt;td>非交换的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>non-scalar cast&lt;/td>
&lt;td>非标量转换&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>notation&lt;/td>
&lt;td>符号，记号&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>numeric&lt;/td>
&lt;td>数值，数字&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>O&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>optimization&lt;/td>
&lt;td>优化&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>out-of-bounds accessing&lt;/td>
&lt;td>越界访问&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>orphan rule&lt;/td>
&lt;td>孤儿规则&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>overflow&lt;/td>
&lt;td>溢出，越界&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>own&lt;/td>
&lt;td>占有，拥有&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>owner&lt;/td>
&lt;td>所有者，拥有者&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ownership&lt;/td>
&lt;td>所有权&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>P&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>package manager&lt;/td>
&lt;td>包管理器，软件包管理器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>panic&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>此单词直接翻译是“恐慌”，&lt;!-- raw HTML omitted -->在 Rust 中用于不可恢复的错误处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parameter&lt;/td>
&lt;td>参量，形参，形式参量&lt;/td>
&lt;td>不严格区分的话， argument（参数）和 &lt;!-- raw HTML omitted --> parameter（参量）可以互换地使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parametric polymorphism&lt;/td>
&lt;td>参数多态&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parent scope&lt;/td>
&lt;td>父级作用域&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parentheses&lt;/td>
&lt;td>小括号，包括“(”和“)”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parse&lt;/td>
&lt;td>分析，解析&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parser&lt;/td>
&lt;td>（语法）分析器，解析器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pattern&lt;/td>
&lt;td>模式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pattern match&lt;/td>
&lt;td>模式匹配&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>phantom type&lt;/td>
&lt;td>虚类型，虚位类型&lt;/td>
&lt;td>phantom 相关的专有名词：&lt;!-- raw HTML omitted -->phantom bug 幻影指令&lt;!-- raw HTML omitted -->phantom power 幻象电源&lt;!-- raw HTML omitted -->参见：&lt;a href="https://wiki.haskell.org/Phantom_type">Haskell&lt;/a>、&lt;a href="https://en.wikibooks.org/wiki/Haskell/Phantom_types">Haskell/Phantom_type&lt;/a>、&lt;!-- raw HTML omitted -->&lt;a href="http://rustwiki.org/rust-by-example/generics/phantom.html">Rust/Phantom&lt;/a>、&lt;a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html">stdlib/PhantomData&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>platform&lt;/td>
&lt;td>平台&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>polymorphism&lt;/td>
&lt;td>多态&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>powershell&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>Windows 系统的一种命令行外壳程序&lt;!-- raw HTML omitted -->和脚本环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>possibility of absence&lt;/td>
&lt;td>不存在的可能性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>precede&lt;/td>
&lt;td>预先？，在&amp;hellip;发生（或出现）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>prelude&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>预先导入模块，英文本意：序曲，前奏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>primitive types&lt;/td>
&lt;td>原生类型，基本类型，简单类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>print&lt;/td>
&lt;td>打印&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>process&lt;/td>
&lt;td>进程&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>procedural macros&lt;/td>
&lt;td>过程宏，程序宏&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>project&lt;/td>
&lt;td>项目，工程&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>prototype&lt;/td>
&lt;td>原型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>R&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>race condition&lt;/td>
&lt;td>竞态条件&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAII&lt;/td>
&lt;td>资源获取即初始化（一般不译）&lt;/td>
&lt;td>resource acquisition is initialization 的缩写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range&lt;/td>
&lt;td>区间，范围&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range expression&lt;/td>
&lt;td>区间表达式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>raw identifier&lt;/td>
&lt;td>原始标识符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>raw pointer&lt;/td>
&lt;td>原始指针，裸指针&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RC&lt;/td>
&lt;td>引用计数&lt;/td>
&lt;td>reference counted&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Reader&lt;/td>
&lt;td>读取器&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>recursive macro&lt;/td>
&lt;td>递归宏&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>reference&lt;/td>
&lt;td>引用&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>reference cycle&lt;/td>
&lt;td>引用循环&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>release&lt;/td>
&lt;td>发布&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>resource&lt;/td>
&lt;td>资源&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>resource leak&lt;/td>
&lt;td>资源泄露&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RHS&lt;/td>
&lt;td>右操作数&lt;/td>
&lt;td>right-hand side 的非正式缩写，&lt;!-- raw HTML omitted -->与 LHS 相对&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>root directory&lt;/td>
&lt;td>根目录&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runtime&lt;/td>
&lt;td>运行时&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runtime behavior&lt;/td>
&lt;td>运行时行为&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runtime overhead&lt;/td>
&lt;td>运行时开销&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>一种编程语言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rustacean&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>编写 Rust 的程序员或爱好者的通称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rustc&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>Rust 语言编译器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>r-value&lt;/td>
&lt;td>右值&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>S&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scalar&lt;/td>
&lt;td>标量，数量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>schedule&lt;/td>
&lt;td>调度&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scope&lt;/td>
&lt;td>作用域&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>screen&lt;/td>
&lt;td>屏幕&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>script&lt;/td>
&lt;td>脚本&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>semicolon&lt;/td>
&lt;td>分号，“;”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>self&lt;/td>
&lt;td>自身，作关键字时不译&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shadow&lt;/td>
&lt;td>遮蔽，隐蔽，隐藏，覆盖&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shallow copy&lt;/td>
&lt;td>浅拷贝，浅复制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signature&lt;/td>
&lt;td>标记&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>slice&lt;/td>
&lt;td>切片&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>snake case&lt;/td>
&lt;td>蛇形命名&lt;/td>
&lt;td>参见：&lt;a href="https://en.wikipedia.org/wiki/Snake_case">Snake case&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>source file&lt;/td>
&lt;td>源文件&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>source code&lt;/td>
&lt;td>源代码&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>specialization&lt;/td>
&lt;td>泛型特化&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>square&lt;/td>
&lt;td>平方，二次方，二次幂&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>square brackets&lt;/td>
&lt;td>中括号，“[”和“]”&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>src&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>source 的缩写，指源代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stack&lt;/td>
&lt;td>栈&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stack unwind&lt;/td>
&lt;td>栈解开、栈展开&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>statement&lt;/td>
&lt;td>语句&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>statically allocated&lt;/td>
&lt;td>静态分配&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>statically allocated string&lt;/td>
&lt;td>静态分配的字符串&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>statically dispatch&lt;/td>
&lt;td>静态分发&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>static method&lt;/td>
&lt;td>静态方法&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>字符串&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string literal&lt;/td>
&lt;td>字符串常量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>string slices&lt;/td>
&lt;td>字符串片段&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stringify&lt;/td>
&lt;td>字符串化&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>subscript notation&lt;/td>
&lt;td>下标&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sugar&lt;/td>
&lt;td>糖&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>super&lt;/td>
&lt;td>父级，作关键字时不译&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>syntax context&lt;/td>
&lt;td>语法上下文&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>systems programming language&lt;/td>
&lt;td>系统级编程语言&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>T&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tagged union&lt;/td>
&lt;td>标记联合&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>target triple&lt;/td>
&lt;td>多层次指标，三层/重 指标/目标&lt;/td>
&lt;td>triple 本义是“三”，但此处虚指“多”，&lt;!-- raw HTML omitted -->此词翻译需要更多讨论&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>terminal&lt;/td>
&lt;td>终端&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>testing&lt;/td>
&lt;td>测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>testsuit&lt;/td>
&lt;td>测试套件&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>the least significant bit (LSB)&lt;/td>
&lt;td>最低数字位&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>the most significant bit (MSB)&lt;/td>
&lt;td>最高数字位&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>thread&lt;/td>
&lt;td>线程&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TOML&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>Tom&amp;rsquo;s Obvious, Minimal Language &lt;!-- raw HTML omitted -->的缩写，一种配置语言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>token tree&lt;/td>
&lt;td>令牌树？&lt;/td>
&lt;td>待进一步斟酌&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trait&lt;/td>
&lt;td>特质&lt;/td>
&lt;td>其字面上有“特性，特征”之意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trait bound&lt;/td>
&lt;td>特质约束&lt;/td>
&lt;td>bound 有“约束，限制，限定”之意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trait object&lt;/td>
&lt;td>特质对象&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transmute&lt;/td>
&lt;td>（不译）&lt;/td>
&lt;td>其字面上有“变化，变形，变异”之意，&lt;!-- raw HTML omitted -->不作翻译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>trivial&lt;/td>
&lt;td>平凡的&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>troubleshooting&lt;/td>
&lt;td>疑难解答，故障诊断，&lt;!-- raw HTML omitted -->故障排除，故障分析&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tuple&lt;/td>
&lt;td>元组&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>two&amp;rsquo;s complement&lt;/td>
&lt;td>补码，二补数&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>two-word object&lt;/td>
&lt;td>双字对象&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type annotation&lt;/td>
&lt;td>类型标注&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type erasure&lt;/td>
&lt;td>类型擦除&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type inference&lt;/td>
&lt;td>类型推导&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type inference engine&lt;/td>
&lt;td>类型推导引擎&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type parameter&lt;/td>
&lt;td>类型参量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type placeholder&lt;/td>
&lt;td>类型占位符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type signature&lt;/td>
&lt;td>类型标记&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>U&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>undefined behavior&lt;/td>
&lt;td>未定义行为&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>uninstall&lt;/td>
&lt;td>卸载&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unit-like struct&lt;/td>
&lt;td>类单元结构体&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unit struct&lt;/td>
&lt;td>单元结构体&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;unit-style&amp;rdquo; tests&lt;/td>
&lt;td>单元测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unit test&lt;/td>
&lt;td>单元测试&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unit type&lt;/td>
&lt;td>单元类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>universal function call syntax &lt;!-- raw HTML omitted -->(UFCS)&lt;/td>
&lt;td>通用函数调用语法&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unsized types&lt;/td>
&lt;td>不定长类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unwind&lt;/td>
&lt;td>展开&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unwrap&lt;/td>
&lt;td>解包&lt;/td>
&lt;td>暂译！&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>V&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>variable binding&lt;/td>
&lt;td>变量绑定&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>variable shadowing&lt;/td>
&lt;td>变量遮蔽，变量隐蔽,&lt;!-- raw HTML omitted -->变量隐藏，变量覆盖&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>variable capture&lt;/td>
&lt;td>变量捕获&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>variant&lt;/td>
&lt;td>变量&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vector&lt;/td>
&lt;td>（动态数组，一般不译）&lt;/td>
&lt;td>vector 本义是“向量”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>visibility&lt;/td>
&lt;td>可见性&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vtable&lt;/td>
&lt;td>虚表&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>W&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>where clause&lt;/td>
&lt;td>where 子句，where 从句，where 分句&lt;/td>
&lt;td>在数据库的官方手册中多翻译成“子句”，英语语法中翻译成“从句”&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wrap&lt;/td>
&lt;td>包裹&lt;/td>
&lt;td>暂译！&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wrapped&lt;/td>
&lt;td>装包&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wrapper&lt;/td>
&lt;td>装包&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Y&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>yield&lt;/td>
&lt;td>产生(收益、效益等)，产出，提供&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Z&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zero-cost abstractions&lt;/td>
&lt;td>零开销抽象&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zero-width space(ZWSP)&lt;/td>
&lt;td>零宽空格&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Goproxy</title><link>https://blog.baicai.me/article/2021/goproxy/</link><pubDate>Thu, 27 May 2021 11:22:40 +0800</pubDate><guid>https://blog.baicai.me/article/2021/goproxy/</guid><description>&lt;h3 id="go-module代理仓库服务">Go Module代理仓库服务&lt;/h3>
&lt;p>七牛云提供的：https://goproxy.cn&lt;/p>
&lt;p>goproxy.io：https://goproxy.io 或 &lt;a href="https://proxy.golang.com.cn">https://proxy.golang.com.cn&lt;/a>&lt;/p>
&lt;p>百度云BOS提供的：https://goproxy.bj.bcebos.com/&lt;/p>
&lt;p>阿里云提供的：https://mirrors.aliyun.com/goproxy/&lt;/p>
&lt;h3 id="下载-go-镜像golang-downloads-mirrors">下载 Go 镜像（Golang Downloads Mirrors）&lt;/h3>
&lt;p>官网：https://go.dev/&lt;/p>
&lt;p>下载 Go 镜像：https://golang.google.cn/&lt;/p>
&lt;p>下载 Go 镜像：https://gomirrors.org/&lt;/p>
&lt;p>下载 Go 镜像：https://studygolang.com/dl&lt;/p></description></item><item><title>Swift语法全面解析</title><link>https://blog.baicai.me/article/2021/swift-basic-syntax/</link><pubDate>Thu, 13 May 2021 21:31:19 +0800</pubDate><guid>https://blog.baicai.me/article/2021/swift-basic-syntax/</guid><description>&lt;h3 id="swift介绍">Swift介绍&lt;/h3>
&lt;p>Swift 是一门开发 iOS, macOS, watchOS 和 tvOS 应用的新语言。
swift 是一种安全，快速和互动的编程语言。
swift 支持代码预览（playgrounds），这个特性可以允许程序员在不编译和运行应用程序的前提下运行 Swift 代码并实时查看结果。&lt;/p>
&lt;p>Swift 通过采用现代编程模式来避免大量常见编程错误：&lt;/p>
&lt;ul>
&lt;li>变量始终在使用前初始化。&lt;/li>
&lt;li>检查数组索引超出范围的错误。&lt;/li>
&lt;li>检查整数是否溢出。&lt;/li>
&lt;li>可选值确保明确处理 nil 值。&lt;/li>
&lt;li>内存被自动管理。&lt;/li>
&lt;li>错误处理允许从意外故障控制恢复。&lt;/li>
&lt;/ul>
&lt;h3 id="基础部分">基础部分&lt;/h3>
&lt;h4 id="常量和变量">常量和变量&lt;/h4>
&lt;p>声明常量和变量， 常量和变量必须在使用前声明，使用 let 来声明常量，使用 var 来声明变量。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> maximumNumberOfLoginAttempts = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> currentLoginAttempt = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类型注解&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> welcomeMessage: String
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="注释">注释&lt;/h4>
&lt;p>单行注释双正斜杠（//）， 多行注释（/* 多行的 */）。Swift 的多行注释可以嵌套在其它的多行注释之中。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这是一个注释&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* 这也是一个注释，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">但是是多行的 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* 这是第一个多行注释的开头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* 这是第二个被嵌套的多行注释 */
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">这是第一个多行注释的结尾 */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="分号">分号&lt;/h4>
&lt;p>Swift 并不强制要求你在每条语句的结尾处使用分号（;）。
同一行内写多条独立的语句必须用分号分隔。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> cat = &lt;span style="color:#e6db74">&amp;#34;🐱&amp;#34;&lt;/span>; print(cat)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出“🐱”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="标识符">标识符&lt;/h4>
&lt;p>标识符就是给变量、常量、方法、函数、枚举、结构体、类、协议等指定的名字。构成标识符的字母均有一定的规范，Swift语言中标识符的命名规则如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>区分大小写，Myname与myname是两个不同的标识符；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标识符首字符可以以下划线（_）或者字母开始，但不能是数字；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标识符中其他字符可以是下划线（_）、字母或数字。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>例如： userName、User_Name、_sys_val、身高等为合法的标识符，而2mail、room#和class为非法的标识符。&lt;/p>
&lt;p>注意:Swift中的字母采用的是Unicode编码。Unicode叫做统一编码制，它包含了亚洲文字编码，如中文、日文、韩文等字符，甚至是我们在聊天工具中使用的表情符号&lt;/p>
&lt;p>如果一定要使用关键字作为标识符，可以在关键字前后添加重音符号（`），例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> `&lt;span style="color:#66d9ef">class&lt;/span>` = &lt;span style="color:#e6db74">&amp;#34;xiaobai&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关键字">关键字&lt;/h4>
&lt;p>关键字是类似于标识符的保留字符序列，除非用重音符号（`）将其括起来，否则不能用作标识符。关键字是对编译器具有特殊意义的预定义保留标识符。常见的关键字有以下4种。
&lt;strong>与声明有关的关键字&lt;/strong>&lt;/p>
&lt;pre>&lt;code>class deinit enum extension
func import init internal
let operator private protocol
public static struct subscript
typealias var
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>与语句有关的关键字&lt;/strong>&lt;/p>
&lt;pre>&lt;code>break case continue default
do else fallthrough for
if in return switch
where while
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>表达式和类型关键字&lt;/strong>&lt;/p>
&lt;pre>&lt;code>as dynamicType false is
nil self Self super
true _COLUMN_ _FILE_ _FUNCTION_
_LINE_
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>在特定上下文中使用的关键字&lt;/strong>&lt;/p>
&lt;pre>&lt;code>associativity convenience dynamic didSet
final get infix inout
lazy left mutating none
nonmutating optional override postfix
precedence prefix Protocol required
right set Type unowned
weak willSet
&lt;/code>&lt;/pre>
&lt;h4 id="swift-空格">Swift 空格&lt;/h4>
&lt;p>Swift对空格的使用有一定的要求。
在Swift中，运算符不能直接跟在变量或常量的后面。例如下面的代码会报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> a= &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误信息是：&lt;/p>
&lt;p>&lt;code>error: prefix/postfix '=' is reserved&lt;/code>&lt;/p>
&lt;p>意思大概是等号直接跟在前面或后面这种用法是保留的。&lt;/p>
&lt;p>下面的代码还是会报错（继续注意空格）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> a = &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误信息是：&lt;/p>
&lt;p>&lt;code>error: consecutive statements on a line must be separated by ';'&lt;/code>&lt;/p>
&lt;p>这是因为Swift认为到1+这个语句就结束了，2就是下一个语句了。&lt;/p>
&lt;p>只有这样写才不会报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> a = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#75715e">// 编码规范推荐使用这种写法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> b = &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#75715e">// 这样也是OK的&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="整数浮点数">整数、浮点数&lt;/h4>
&lt;p>统一使用 Int 可以提高代码的可复用性，避免不同类型数字之间的转换， 并且匹配数字的类型推断。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> minValue = UInt8.min &lt;span style="color:#75715e">// minValue 为 0，是 UInt8 类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> maxValue = UInt8.max &lt;span style="color:#75715e">// maxValue 为 255，是 UInt8 类型&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="类型安全和类型推断">类型安全和类型推断&lt;/h4>
&lt;p>Swift 是一门类型安全的语言，这意味着 Swift 可以让你清楚地知道值的类型。
如果你没有显式指定类型，Swift 会使用类型推断来选择合适的类型。（int、double）。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> meaningOfLife = &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// meaningOfLife 会被推测为 Int 类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> pi = &lt;span style="color:#ae81ff">3.14159&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pi 会被推测为 Double 类型&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="数值型字面量数值型类型转换">数值型字面量、数值型类型转换&lt;/h4>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> decimalInteger = &lt;span style="color:#ae81ff">17&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> binaryInteger = &lt;span style="color:#ae81ff">0b10001&lt;/span> &lt;span style="color:#75715e">// 二进制的17&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> octalInteger = &lt;span style="color:#ae81ff">0o21&lt;/span> &lt;span style="color:#75715e">// 八进制的17&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> hexadecimalInteger = &lt;span style="color:#ae81ff">0x11&lt;/span> &lt;span style="color:#75715e">// 十六进制的17&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="类型别名">类型别名&lt;/h4>
&lt;p>类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用 typealias 关键字来定义类型别名。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typealias&lt;/span> AudioSample = UInt16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> maxAmplitudeFound = AudioSample.min
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// maxAmplitudeFound 现在是 0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="布尔值">布尔值&lt;/h4>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> orangesAreOrange = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> turnipsAreDelicious = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="元组">元组&lt;/h4>
&lt;p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> http404Error = (&lt;span style="color:#ae81ff">404&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Not Found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// http404Error 的类型是 (Int, String)，值是 (404, &amp;#34;Not Found&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="可选类型">可选类型&lt;/h4>
&lt;p>使用可选类型（optionals）来处理值可能缺失的情况。可选类型表示两种可能：或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> serverResponseCode: Int? = &lt;span style="color:#ae81ff">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// serverResponseCode 包含一个可选的 Int 值 404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>serverResponseCode = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// serverResponseCode 现在不包含值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="错误处理">错误处理&lt;/h4>
&lt;p>错误处理，应对程序执行中可能会遇到的错误条件。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makeASandwich&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> makeASandwich()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eatASandwich()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> SandwichError.outOfCleanDishes {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> washDishes()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> SandwichError.missingIngredients(&lt;span style="color:#66d9ef">let&lt;/span> ingredients) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buyGroceries(ingredients)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="断言和先决条件">断言和先决条件&lt;/h4>
&lt;p>断言和先决条件，是在运行时所做的检查。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> age = &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assert(age &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A person&amp;#39;s age cannot be less than zero&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 因为 age &amp;lt; 0，所以断言会触发&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="基本运算符">基本运算符&lt;/h4>
&lt;p>&lt;code>Swift 支持大部分标准 C 语言的运算符，还提供了 C 语言没有的区间运算符，例如 a..&amp;lt;b 或 a...b。&lt;/code>
&lt;strong>赋值运算符，算术运算符，组合赋值运算符，比较运算符，三元运算符，空合运算符，区间运算符，逻辑运算符&lt;/strong>&lt;/p>
&lt;p>运算符分为一元、二元和三元运算符。
闭区间运算符（a&amp;hellip;b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间。
半开区间运算符（a..&amp;lt;b）定义一个从 a 到 b 但不包括 b 的区间。
闭区间操作符有另一个表达形式，可以表达往一侧无限延伸的区间，(a&amp;hellip;，&amp;hellip;b)。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> names = [&lt;span style="color:#e6db74">&amp;#34;Anna&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Brian&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> count = names.count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0.&lt;/span>.&amp;lt;count {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;第 &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> 个人叫 &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>names[i]&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第 1 个人叫 Anna&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第 2 个人叫 Alex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第 3 个人叫 Brian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第 4 个人叫 Jack&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="字符串和字符">字符串和字符&lt;/h4>
&lt;p>&lt;strong>字符串字面量，字符串插值，计算字符数量，访问和修改字符串，子字符串，比较字符串&lt;/strong>&lt;/p>
&lt;p>初始化空字符串，字符串可变性，字符串是值类型，连接字符串和字符(+，+=)。
使用字符，可通过 for-in 循环来遍历字符串，获取字符串中每一个字符的值。
字符串插值是一种构建新字符串的方式，可以在其中包含常量、变量、字面量和表达式。可以在已有字符串中插入常量、变量、字面量和表达式从而形成更长的字符串。
Swift 提供了三种方式来比较文本值：字符串字符相等、前缀相等和后缀相等。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 多行字符串字面量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> quotation = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">The White Rabbit put on his spectacles. &amp;#34;&lt;/span>Where shall I begin,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>please your Majesty?&lt;span style="color:#e6db74">&amp;#34; he asked.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>Begin at the beginning,&lt;span style="color:#e6db74">&amp;#34; the King said gravely, &amp;#34;&lt;/span>and go on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>till you come to the end; then stop.&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 下面两个字符串其实是一样的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> singleLineString = &lt;span style="color:#e6db74">&amp;#34;These are the same.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> multilineString = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">These are the same.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 字符串插值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> multiplier = &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>multiplier&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> times 2.5 is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>Double&lt;span style="color:#e6db74">(&lt;/span>multiplier&lt;span style="color:#e6db74">)&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2.5&lt;/span>&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// message 是 &amp;#34;3 times 2.5 is 7.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 计算字符数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> word = &lt;span style="color:#e6db74">&amp;#34;cafe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;the number of characters in &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>word&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>word.count&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印输出“the number of characters in cafe is 4”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> emptyString = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 空字符串字面量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> anotherEmptyString = String() &lt;span style="color:#75715e">// 初始化方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 两个字符串均为空并等价。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> catCharacters: [Character] = [&lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;t&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> catString = String(catCharacters)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(catString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印输出：“Cat!”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="集合类型">集合类型&lt;/h4>
&lt;p>Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。数组是有序数据的集。集合是无序无重复数据的集。字典是无序的键值对的集。
&lt;strong>集合的可变性，数组（Arrays），集合（Sets），集合操作，字典&lt;/strong>&lt;/p>
&lt;p>数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。
集合用来存储相同类型并且没有确定顺序的值。当集合元素顺序不重要时或者希望确保每个元素只出现一次时可以使用集合而不是数组。
集合操作，可以高效地完成集合的一些基本操作，比如把两个集合组合到一起，判断两个集合共有元素，或者判断两个集合是否全包含，部分包含或者不相交。
字典是一种无序的集合，它存储的是键值对之间的关系，其所有键的值需要是相同的类型，所有值的类型也需要相同。每个值（value）都关联唯一的键（key），键作为字典中这个值数据的标识符。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 集合&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> someInts = [Int]()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;someInts is of type [Int] with &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>someInts.count&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> items.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“someInts is of type [Int] with 0 items.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> threeDoubles = Array(repeating: &lt;span style="color:#ae81ff">0.0&lt;/span>, count: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> anotherThreeDoubles = Array(repeating: &lt;span style="color:#ae81ff">2.5&lt;/span>, count: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> sixDoubles = threeDoubles &lt;span style="color:#f92672">+&lt;/span> anotherThreeDoubles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// enumerated() 方法遍历数组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> shoppingList: [String] = [&lt;span style="color:#e6db74">&amp;#34;Eggs&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Milk&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (index, value) &lt;span style="color:#66d9ef">in&lt;/span> shoppingList.enumerated() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Item &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>String&lt;span style="color:#e6db74">(&lt;/span>index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">))&lt;/span>&lt;span style="color:#e6db74">: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>value&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="控制流">控制流&lt;/h4>
&lt;p>&lt;strong>For-In 循环，While 循环（Repeat-While），条件语句，控制转移语句，提前退出（guard），检测 API 可用性&lt;/strong>&lt;/p>
&lt;p>像 if 语句一样，guard 的执行取决于一个表达式的布尔值。我们可以使用 guard 语句来要求条件必须为真时，以执行 guard 语句后的代码。不同于 if 语句，一个 guard 语句总是有一个 else 从句，如果条件不为真则执行 else 从句中的代码。
Swift 内置支持检查 API 可用性，编译器使用 SDK 中的可用信息来验证我们的代码中使用的所有 API 在项目指定的部署目标上是否可用。如果我们尝试使用一个不可用的 API，Swift 会在编译时报错。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> names = [&lt;span style="color:#e6db74">&amp;#34;Anna&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Brian&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Jack&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#66d9ef">in&lt;/span> names {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Hello, &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> numberOfLegs = [&lt;span style="color:#e6db74">&amp;#34;spider&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ant&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cat&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (animalName, legCount) &lt;span style="color:#66d9ef">in&lt;/span> numberOfLegs {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>animalName&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">s have &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>legCount&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> legs&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// repeat-while 循环的一般格式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">repeat&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> statements
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">while&lt;/span> condition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 提前退出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(person: [String: String]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">guard&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> name = person[&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>] &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Hello &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">guard&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> location = person[&lt;span style="color:#e6db74">&amp;#34;location&amp;#34;&lt;/span>] &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;I hope the weather is nice near you.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;I hope the weather is nice in &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>location&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet(person: [&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出“Hello John!”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出“I hope the weather is nice near you.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet(person: [&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Jane&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;location&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Cupertino&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出“Hello Jane!”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出“I hope the weather is nice in Cupertino.”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="函数">函数&lt;/h4>
&lt;p>&lt;strong>函数的定义与调用，函数参数与返回值，函数参数标签和参数名称，函数类型，嵌套函数&lt;/strong>&lt;/p>
&lt;p>可选元组返回类型。
定义一个输入输出参数时，在参数定义前加 inout 关键字。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(person: String) -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> greeting = &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> person &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> greeting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(person: String, from hometown: String) -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>person&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">! Glad you could visit from &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>hometown&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(greet(person: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>, from: &lt;span style="color:#e6db74">&amp;#34;Cupertino&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Hello Bill! Glad you could visit from Cupertino.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 可选元组返回类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">minMax&lt;/span>(array: [Int]) -&amp;gt; (min: Int, max: Int)? {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> array.isEmpty { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> currentMin = array[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> currentMax = array[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> value &lt;span style="color:#66d9ef">in&lt;/span> array[&lt;span style="color:#ae81ff">1.&lt;/span>.&amp;lt;array.count] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> value &lt;span style="color:#f92672">&amp;lt;&lt;/span> currentMin {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentMin = value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> value &lt;span style="color:#f92672">&amp;gt;&lt;/span> currentMax {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentMax = value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (currentMin, currentMax)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 隐式返回的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">greeting&lt;/span>(&lt;span style="color:#66d9ef">for&lt;/span> person: String) -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> person &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(greeting(&lt;span style="color:#66d9ef">for&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Dave&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印 &amp;#34;Hello, Dave!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 参数标签&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(person: String, from hometown: String) -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>person&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">! Glad you could visit from &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>hometown&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(greet(person: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>, from: &lt;span style="color:#e6db74">&amp;#34;Cupertino&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Hello Bill! Glad you could visit from Cupertino.”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="闭包">闭包&lt;/h4>
&lt;p>闭包是自包含的函数代码块，可以在代码中被传递和使用。与一些编程语言中的匿名函数（Lambdas）比较相似。
&lt;strong>闭包表达式，尾随闭包，值捕获，闭包是引用类型，逃逸闭包（@escaping），自动闭包&lt;/strong>&lt;/p>
&lt;p>如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，将这个闭包替换成为尾随闭包的形式很有用。
闭包可以在其被定义的上下文中捕获常量或变量。即使定义这些常量和变量的原作用域已经不存在，闭包仍然可以在闭包函数体内引用和修改这些值。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 闭包表达式语法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ (parameters) -&amp;gt; &lt;span style="color:#66d9ef">return&lt;/span> type &lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> statements
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 尾随闭包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> digitNames = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Zero&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;One&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Two&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Three&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Four&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Five&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Six&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Seven&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Eight&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Nine&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> numbers = [&lt;span style="color:#ae81ff">16&lt;/span>, &lt;span style="color:#ae81ff">58&lt;/span>, &lt;span style="color:#ae81ff">510&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> strings = numbers.map {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (number) -&amp;gt; String &lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> number = number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> output = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">repeat&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output = digitNames[number &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>]&lt;span style="color:#f92672">!&lt;/span> &lt;span style="color:#f92672">+&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number &lt;span style="color:#f92672">/=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">while&lt;/span> number &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// strings 常量被推断为字符串类型数组，即 [String]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 其值为 [&amp;#34;OneSix&amp;#34;, &amp;#34;FiveEight&amp;#34;, &amp;#34;FiveOneZero&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 值捕获&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makeIncrementer&lt;/span>(forIncrement amount: Int) -&amp;gt; () -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> runningTotal = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">incrementer&lt;/span>() -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runningTotal &lt;span style="color:#f92672">+=&lt;/span> amount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> runningTotal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> incrementer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 自动闭包，延迟求值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> customersInLine = [&lt;span style="color:#e6db74">&amp;#34;Chris&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Alex&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Ewa&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Barry&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Daniella&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(customersInLine.count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印出“5”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> customerProvider = { customersInLine.remove(at: &lt;span style="color:#ae81ff">0&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(customersInLine.count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印出“5”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Now serving &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>customerProvider&lt;span style="color:#e6db74">())&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints &amp;#34;Now serving Chris!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(customersInLine.count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印出“4”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="枚举">枚举&lt;/h4>
&lt;p>使用 enum 关键词来创建枚举并且把它们的整个定义放在一对大括号内。
&lt;strong>枚举语法，使用 Switch 语句匹配枚举值，枚举成员的遍历，关联值，原始值（默认值），递归枚举（indirect）&lt;/strong>&lt;/p>
&lt;p>可以定义 Swift 枚举来存储任意类型的关联值，每个枚举成员的关联值类型可以各不相同。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 枚举语法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">SomeEnumeration&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 枚举定义放在这里&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">CompassPoint&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> north
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> south
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> east
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> west
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Planet&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> somePlanet = Planet.earth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">switch&lt;/span> somePlanet {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> .earth:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Mostly harmless&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Not a safe place for humans&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Mostly harmless”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 关联值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Barcode&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> upc(Int, Int, Int, Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> qrCode(String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> productBarcode = Barcode.upc(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">85909&lt;/span>, &lt;span style="color:#ae81ff">51226&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>productBarcode = .qrCode(&lt;span style="color:#e6db74">&amp;#34;ABCDEFGHIJKLMNOP&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">switch&lt;/span> productBarcode {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> .upc(numberSystem, manufacturer, product, check):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;UPC: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>numberSystem&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>manufacturer&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>product&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>check&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> .qrCode(productCode):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;QR code: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>productCode&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“QR code: ABCDEFGHIJKLMNOP.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 递归枚举&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">indirect&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">ArithmeticExpression&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> number(Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> addition(ArithmeticExpression, ArithmeticExpression)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> multiplication(ArithmeticExpression, ArithmeticExpression)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> five = ArithmeticExpression.number(&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> four = ArithmeticExpression.number(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> sum = ArithmeticExpression.addition(five, four)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(&lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// (5 + 4) * 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">evaluate&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> expression: ArithmeticExpression) -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> expression {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> .number(value):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> .addition(&lt;span style="color:#66d9ef">left&lt;/span>, &lt;span style="color:#66d9ef">right&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> evaluate(&lt;span style="color:#66d9ef">left&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> evaluate(&lt;span style="color:#66d9ef">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> .multiplication(&lt;span style="color:#66d9ef">left&lt;/span>, &lt;span style="color:#66d9ef">right&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> evaluate(&lt;span style="color:#66d9ef">left&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> evaluate(&lt;span style="color:#66d9ef">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(evaluate(product))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“18”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="结构体和类">结构体和类&lt;/h4>
&lt;p>&lt;strong>结构体和类对比，结构体和枚举是值类型，类是引用类型&lt;/strong>&lt;/p>
&lt;p>结构体和类作为一种通用而又灵活的结构，成为了人们构建代码的基础。你可以使用定义常量、变量和函数的语法，为你的结构体和类定义属性、添加方法。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类和结构体&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SomeStructure&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在这里定义结构体&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeClass&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在这里定义类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Resolution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> width = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> height = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">VideoMode&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> resolution = Resolution()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> interlaced = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> frameRate = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> name: String?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="属性">属性&lt;/h4>
&lt;p>&lt;strong>存储属性，计算属性，属性观察器，属性包装器，全局变量和局部变量，类型属性（static）&lt;/strong>&lt;/p>
&lt;p>属性将值与特定的类、结构体或枚举关联。存储属性会将常量和变量存储为实例的一部分，而计算属性则是直接计算（而不是存储）值。计算属性可以用于类、结构体和枚举，而存储属性只能用于类和结构体。
属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，即使新值和当前值相同的时候也不例外。&lt;/p>
&lt;ul>
&lt;li>willSet 在新的值被设置之前调用&lt;/li>
&lt;li>didSet 在新的值被设置之后调用&lt;/li>
&lt;/ul>
&lt;p>属性包装器在管理属性如何存储和定义属性的代码之间添加了一个分隔层。
类型属性也是通过点运算符来访问。但是，类型属性是通过类型本身来访问，而不是通过实例。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 属性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> x = &lt;span style="color:#ae81ff">0.0&lt;/span>, y = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Size&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> width = &lt;span style="color:#ae81ff">0.0&lt;/span>, height = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Rect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> origin = Point()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> size = Size() &lt;span style="color:#75715e">//存储属性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> center: Point { &lt;span style="color:#75715e">//计算型属性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> centerX = origin.x &lt;span style="color:#f92672">+&lt;/span> (size.width &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> centerY = origin.y &lt;span style="color:#f92672">+&lt;/span> (size.height &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Point(x: centerX, y: centerY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span>(newCenter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> origin.x = newCenter.x &lt;span style="color:#f92672">-&lt;/span> (size.width &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> origin.y = newCenter.y &lt;span style="color:#f92672">-&lt;/span> (size.height &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> square = Rect(origin: Point(x: &lt;span style="color:#ae81ff">0.0&lt;/span>, y: &lt;span style="color:#ae81ff">0.0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: Size(width: &lt;span style="color:#ae81ff">10.0&lt;/span>, height: &lt;span style="color:#ae81ff">10.0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> initialSquareCenter = square.center
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>square.center = Point(x: &lt;span style="color:#ae81ff">15.0&lt;/span>, y: &lt;span style="color:#ae81ff">15.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;square.origin is now at (&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>square.origin.x&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>square.origin.y&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“square.origin is now at (10.0, 10.0)”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 属性包装器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@propertyWrapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">TwelveOrLess&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> number = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> wrappedValue: Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> number }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { number = min(newValue, &lt;span style="color:#ae81ff">12&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="方法">方法&lt;/h4>
&lt;p>&lt;strong>实例方法（Instance Methods），类型方法（static）&lt;/strong>&lt;/p>
&lt;p>方法是与某些特定类型相关联的函数。
类、结构体、枚举都可以定义实例方法；实例方法为给定类型的实例封装了具体的任务与功能。
类、结构体、枚举也可以定义类型方法；类型方法与类型本身相关联。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> count = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(by amount: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">+=&lt;/span> amount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reset&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="下标">下标&lt;/h4>
&lt;p>下标可以定义在类、结构体和枚举中，是访问集合、列表或序列中元素的快捷方式
下标语法（subscript），下标用法，下标选项，类型下标（static）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">subscript&lt;/span>(index: Int) -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回一个适当的 Int 类型的值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span>(newValue) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行适当的赋值操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">TimesTable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> multiplier: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">subscript&lt;/span>(index: Int) -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> multiplier &lt;span style="color:#f92672">*&lt;/span> index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> threeTimesTable = TimesTable(multiplier: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;six times three is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>threeTimesTable[&lt;span style="color:#ae81ff">6&lt;/span>]&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“six times three is 18”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> numberOfLegs = [&lt;span style="color:#e6db74">&amp;#34;spider&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ant&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;cat&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numberOfLegs[&lt;span style="color:#e6db74">&amp;#34;bird&amp;#34;&lt;/span>] = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类型下标&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Planet&lt;/span>: Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> mercury = &lt;span style="color:#ae81ff">1&lt;/span>, venus, earth, mars, jupiter, saturn, uranus, neptune
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">subscript&lt;/span>(n: Int) -&amp;gt; Planet {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Planet(rawValue: n)&lt;span style="color:#f92672">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> mars = Planet[&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(mars)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="继承">继承&lt;/h4>
&lt;p>&lt;strong>定义一个基类，子类生成，重写(override)，防止重写(final)&lt;/strong>&lt;/p>
&lt;p>不继承于其它类的类，称之为基类。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 继承&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeClass&lt;/span>: SomeSuperclass {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里是子类的定义&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Vehicle&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> currentSpeed = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> description: String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;traveling at &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>currentSpeed&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> miles per hour&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makeNoise&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 什么也不做——因为车辆不一定会有噪音&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>: Vehicle {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> gear = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> description: String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">super&lt;/span>.description &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; in gear &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>gear&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AutomaticCar&lt;/span>: Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> currentSpeed: Double {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">didSet&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gear = Int(currentSpeed &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">10.0&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="构造过程">构造过程&lt;/h4>
&lt;p>构造过程是使用类、结构体或枚举类型的实例之前的准备过程。
&lt;strong>存储属性的初始赋值，自定义构造过程，默认构造器，值类型的构造器代理，类的继承和构造过程，可失败构造器，必要构造器（required）&lt;/strong>&lt;/p>
&lt;p>构造器可以通过调用其它构造器来完成实例的部分构造过程。这一过程称为构造器代理，它能避免多个构造器间的代码重复。
Swift 为类类型提供了两种构造器来确保实例中所有存储型属性都能获得初始值，它们被称为指定构造器和便利构造器。
可以在一个类，结构体或是枚举类型的定义中，添加一个或多个可失败构造器。其语法为在 init 关键字后面添加问号（init?）。
必要构造器，在类的构造器前添加 required 修饰符表明所有该类的子类都必须实现该构造器。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 构造过程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在此处执行构造过程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Fahrenheit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> temperature: Double
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temperature = &lt;span style="color:#ae81ff">32.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> f = Fahrenheit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;The default temperature is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>f.temperature&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">° Fahrenheit&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“The default temperature is 32.0° Fahrenheit”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> red, green, blue: Double
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(red: Double, green: Double, blue: Double) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.red = red
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.green = green
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.blue = blue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(white: Double) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red = white
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> green = white
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blue = white
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="析构过程">析构过程&lt;/h4>
&lt;p>析构器只适用于类类型，当一个类的实例被释放之前，析构器会被立即调用。析构器用关键字 deinit 来标示，类似于构造器要用 init 来标示。
Swift 会自动释放不再需要的实例以释放资源。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 析构过程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">deinit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 执行析构过程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Bank&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> coinsInBank = &lt;span style="color:#ae81ff">10_000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">distribute&lt;/span>(coins numberOfCoinsRequested: Int) -&amp;gt; Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coinsInBank &lt;span style="color:#f92672">-=&lt;/span> numberOfCoinsToVend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> numberOfCoinsToVend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">receive&lt;/span>(coins: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coinsInBank &lt;span style="color:#f92672">+=&lt;/span> coins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Player&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> coinsInPurse: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(coins: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coinsInPurse = Bank.distribute(coins: coins)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">win&lt;/span>(coins: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coinsInPurse &lt;span style="color:#f92672">+=&lt;/span> Bank.distribute(coins: coins)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Bank.receive(coins: coinsInPurse)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="可选链式调用">可选链式调用&lt;/h4>
&lt;p>可选链式调用是一种可以在当前值可能为 nil 的可选值上请求和调用属性、方法及下标的方法。
通过在想调用的属性、方法，或下标的可选值后面放一个问号（?），可以定义一个可选链。类似在可选值后面放一个叹号（!）来强制展开它的值。它们的主要区别在于当可选值为空时可选链式调用只会调用失败，然而强制展开将会触发运行时错误。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> residence: Residence?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Residence&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> numberOfRooms = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> john = Person()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> roomCount = john.residence!.numberOfRooms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这会引发运行时错误&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> roomCount = john.residence?.numberOfRooms {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;John&amp;#39;s residence has &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>roomCount&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> room(s).&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Unable to retrieve the number of rooms.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Unable to retrieve the number of rooms.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john.residence = Residence()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> roomCount = john.residence?.numberOfRooms {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;John&amp;#39;s residence has &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>roomCount&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> room(s).&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Unable to retrieve the number of rooms.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“John&amp;#39;s residence has 1 room(s).”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="错误处理-1">错误处理&lt;/h4>
&lt;p>错误处理（Error handling） 是响应错误以及从错误中恢复的过程。Swift 在运行时提供了抛出、捕获、传递和操作可恢复错误（recoverable errors）的一等支持。
&lt;strong>表示与抛出错误，处理错误，指定清理操作&lt;/strong>&lt;/p>
&lt;p>在 Swift 中，错误用遵循 Error 协议的类型的值来表示。
Swift 中有 4 种处理错误的方式。可以把函数抛出的错误传递给调用此函数的代码（throws）、用 do-catch 语句处理错误、将错误作为可选类型处理（try?）、或者断言此错误根本不会发生（try!）。
defer 语句将代码的执行延迟到当前的作用域退出之前。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 错误处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">VendingMachineError&lt;/span>: Error {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> invalidSelection &lt;span style="color:#75715e">//选择无效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> insufficientFunds(coinsNeeded: Int) &lt;span style="color:#75715e">//金额不足&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> outOfStock &lt;span style="color:#75715e">//缺货&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">throw&lt;/span> VendingMachineError.insufficientFunds(coinsNeeded: &lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> vendingMachine = VendingMachine()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vendingMachine.coinsDeposited = &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> buyFavoriteSnack(person: &lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, vendingMachine: vendingMachine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Success! Yum.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> VendingMachineError.invalidSelection {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Invalid Selection.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> VendingMachineError.outOfStock {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Out of Stock.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> VendingMachineError.insufficientFunds(&lt;span style="color:#66d9ef">let&lt;/span> coinsNeeded) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Insufficient funds. Please insert an additional &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>coinsNeeded&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> coins.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Unexpected error: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>error&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Insufficient funds. Please insert an additional 2 coins.”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 指定清理操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">processFile&lt;/span>(filename: String) &lt;span style="color:#66d9ef">throws&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> exists(filename) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> file = open(filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> line = &lt;span style="color:#66d9ef">try&lt;/span> file.readline() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// close(file) 会在这里被调用，即作用域的最后。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="类型转换">类型转换&lt;/h4>
&lt;p>类型转换在 Swift 中使用 is 和 as 操作符实现。这两个操作符分别提供了一种简单达意的方式去检查值的类型或者转换它的类型。
&lt;strong>为类型转换定义类层次，检查类型（is），向下转型（as? 或 as!），Any 和 AnyObject 的类型转换&lt;/strong>&lt;/p>
&lt;p>可以将类型转换用在类和子类的层次结构上，检查特定类实例的类型并且转换这个类实例的类型成为这个层次结构中的其他类型。
Swift 为不确定类型提供了两种特殊的类型别名：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Any 可以表示任何类型，包括函数类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AnyObject 可以表示任何类类型的实例。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类型转换&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 一个基类 MediaItem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MediaItem&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> name: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.name = name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Movie&lt;/span>: MediaItem {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> director: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String, director: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.director = director
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#66d9ef">init&lt;/span>(name: name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Song&lt;/span>: MediaItem {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> artist: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String, artist: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.srtist = artist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#66d9ef">init&lt;/span>(name: name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> library = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Movie(name: &lt;span style="color:#e6db74">&amp;#34;Casablanca&amp;#34;&lt;/span>, director: &lt;span style="color:#e6db74">&amp;#34;Micheal Curtiz&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Song(name: &lt;span style="color:#e6db74">&amp;#34;Blue Suede Shose&amp;#34;&lt;/span>, artist: &lt;span style="color:#e6db74">&amp;#34;Elvis Presley&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Movie(name: &lt;span style="color:#e6db74">&amp;#34;Citizen Kane&amp;#34;&lt;/span>, director: &lt;span style="color:#e6db74">&amp;#34;Orson Wells&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Song(name: &lt;span style="color:#e6db74">&amp;#34;The One And Only&amp;#34;&lt;/span>, artist: &lt;span style="color:#e6db74">&amp;#34;Chesney Hawkes&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Song(name: &lt;span style="color:#e6db74">&amp;#34;Never Gonna Give You Up&amp;#34;&lt;/span>, artist: &lt;span style="color:#e6db74">&amp;#34;Rick Astley&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> movieCount = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> songCount = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#66d9ef">in&lt;/span> library {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> item &lt;span style="color:#66d9ef">is&lt;/span> Movie {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> movieCount &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> item &lt;span style="color:#66d9ef">is&lt;/span> Song {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> songCount &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Media library contains &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>movieCount&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> movies and &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>songCount&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“Media library contains 2 movies and 3 songs”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#66d9ef">in&lt;/span> library {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> movie = item &lt;span style="color:#66d9ef">as&lt;/span>? Movie {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Movie: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>movie.name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, dir. &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>movie.director&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> song = item &lt;span style="color:#66d9ef">as&lt;/span>? Song {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Song: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>song.name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">, by &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>song.artist&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Movie: Casablanca, dir. Michael Curtiz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Song: Blue Suede Shoes, by Elvis Presley&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Movie: Citizen Kane, dir. Orson Welles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Song: The One And Only, by Chesney Hawkes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Song: Never Gonna Give You Up, by Rick Astley&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="嵌套类型">嵌套类型&lt;/h4>
&lt;p>Swift 允许定义嵌套类型，可以在支持的类型中定义嵌套的枚举、类和结构体。
&lt;strong>嵌套类型实践，引用嵌套类型&lt;/strong>&lt;/p>
&lt;p>要在一个类型中嵌套另一个类型，将嵌套类型的定义写在其外部类型的 {} 内，而且可以根据需要定义多级嵌套。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 嵌套类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stuct BlackjackCard {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 嵌套的 Suit 枚举&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Suit&lt;/span>: Character {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> spades = &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, hearts = &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>, diamonds = &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>, clubs = &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 嵌套的 Rank 枚举&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Rank&lt;/span>: Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> two = &lt;span style="color:#ae81ff">2&lt;/span>, three, four, five, six, seven, eight, nine, ten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> jack, queen, king, ace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Values&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> first: Int, second: Int?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> values: Values {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#66d9ef">self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> .ace:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Values(first: &lt;span style="color:#ae81ff">1&lt;/span>, second: &lt;span style="color:#ae81ff">11&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> .jack, .queen, .king:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Values(first: &lt;span style="color:#ae81ff">10&lt;/span>, second: &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Values(first: &lt;span style="color:#66d9ef">self&lt;/span>.rawValue, second: &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// BlackjackCard 的属性和方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> rank: Rank, suit: Suit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> description: String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> output = &lt;span style="color:#e6db74">&amp;#34;suit is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>suit.rawValue&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">,&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; value is &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>rank.values.first&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> second = rank.values.second {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; or &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>second&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;theAceOfSpades: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>theAceOfSpades.description&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“theAceOfSpades: suit is 1, value is 1 or 11”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> heartsSymbol = BlackjackCard.Suit.hearts.rawValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="扩展">扩展&lt;/h4>
&lt;p>扩展可以给一个现有的类，结构体，枚举，还有协议添加新的功能。
&lt;strong>扩展的语法，计算型属性，构造器，方法，下标，嵌套类型&lt;/strong>&lt;/p>
&lt;p>Swift 中的扩展可以：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>添加计算型实例属性和计算型类属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定义实例方法和类方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提供新的构造器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定义下标&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定义和使用新的嵌套类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使已经存在的类型遵循（conform）一个协议&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>扩展语法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">SomeType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在这里给 SomeType 添加新的功能&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>扩展可以给现有类型添加计算型实例属性和计算型类属性。
扩展可以给现有的类型添加新的构造器。
扩展可以给现有类型添加新的实例方法和类方法。
扩展可以给现有的类型添加新的下标。
扩展可以给现有的类，结构体，还有枚举添加新的嵌套类型。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 扩展的语法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">SomeType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在这里给 SomeType 添加新的功能&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 添加一个或多个协议&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">SomeType&lt;/span>: SomeProtocol, AnotherProtocol {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 协议所需要的实现写在这里&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Size&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> width = &lt;span style="color:#ae81ff">0.0&lt;/span>, height = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> x = &lt;span style="color:#ae81ff">0.0&lt;/span>, y = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Rect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> origin = Point()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> size = Size()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">Rect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(center: Point, size: Size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> originX = center.x &lt;span style="color:#f92672">-&lt;/span> (size.width &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> originY = center.y &lt;span style="color:#f92672">-&lt;/span> (size.height &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.&lt;span style="color:#66d9ef">init&lt;/span>(origin: Point(x: originX, y: originY), size: size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> centerRect = Rect(center: Point(x: &lt;span style="color:#ae81ff">4.0&lt;/span>, y: &lt;span style="color:#ae81ff">4.0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: Size(width: &lt;span style="color:#ae81ff">3.0&lt;/span>, height: &lt;span style="color:#ae81ff">3.0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// centerRect 的 origin 是 (2.5, 2.5) 并且它的 size 是 (3.0, 3.0)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">Int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">repetitions&lt;/span>(task: () -&amp;gt; Void) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">_&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0.&lt;/span>.&amp;lt;&lt;span style="color:#66d9ef">self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3.&lt;/span>repetitions {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Hello!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Hello!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Hello!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Hello!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">Int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">mutating&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">square&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span> = &lt;span style="color:#66d9ef">self&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">self&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> somtInt = &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>someInt.square()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// someInt 现在是9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="协议">协议&lt;/h4>
&lt;p>协议定义了一个蓝图，规定了用来实现某一特定任务或者功能的方法、属性，以及其他需要的东西。
类、结构体或枚举都可以遵循协议，并为协议定义的这些要求提供具体实现。
协议语法，属性要求，方法要求，异变方法要求，构造器要求，协议作为类型，委托，协议类型的集合，协议的继承，类专属的协议，协议合成，检查协议一致性，可选的协议要求，协议扩展，&lt;/p>
&lt;p>协议语法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">SomeProtocol&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里是协议的定义部分&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>协议可以要求遵循协议的类型提供特定名称和类型的实例属性或类型属性。
协议可以要求遵循协议的类型实现某些指定的实例方法或类方法。
在值类型（即结构体和枚举）的实例方法中，将 mutating 关键字作为方法的前缀，写在 func 关键字之前，表示可以在该方法中修改它所属的实例以及实例的任意属性的值。
协议可以要求遵循协议的类型实现指定的构造器。
委托是一种设计模式，它允许类或结构体将一些需要它们负责的功能委托给其他类型的实例。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 协议语法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">SomeProtocol&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里是协议的定义部分&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SomeStructure&lt;/span>: FirstProtocol, AnotherProtocol {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里是结构体的定义部分&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeClass&lt;/span>: SomeSuperClass, FirstProtocol, AnotherProtocol {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里是类的定义部分&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">SomeProtocol&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> mustBeSettable: Int { &lt;span style="color:#66d9ef">get&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> doesNotNeedToBeSettable: Int { &lt;span style="color:#66d9ef">get&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">AnotherProtocol&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> someTypeProperty: Int { &lt;span style="color:#66d9ef">get&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">FullyNamed&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> fullName: String { &lt;span style="color:#66d9ef">get&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">person&lt;/span>: FullyNamed {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> fullName: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> john = Person(fullName: &lt;span style="color:#e6db74">&amp;#34;John Appleseed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// john.fullName 为 &amp;#34;John Appleseed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Starship&lt;/span>: FullyNamed {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> prefix: String?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> name: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String, &lt;span style="color:#66d9ef">prefix&lt;/span>: String? = &lt;span style="color:#66d9ef">nil&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.name = name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.&lt;span style="color:#66d9ef">prefix&lt;/span> = &lt;span style="color:#66d9ef">prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> fullName: String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">prefix&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> ? &lt;span style="color:#66d9ef">prefix&lt;/span>! &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> ncc1701 = Starship(name: &lt;span style="color:#e6db74">&amp;#34;Enterprise&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">prefix&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;USS&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ncc1701.fullName 为 &amp;#34;USS Enterprise&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="泛型">泛型&lt;/h4>
&lt;p>泛型代码让你能根据自定义的需求，编写出适用于任意类型的、灵活可复用的函数及类型。
你可避免编写重复的代码，而是用一种清晰抽象的方式来表达代码的意图。
&lt;strong>泛型函数，类型参数，命名类型参数，泛型类型，泛型扩展，类型约束，关联类型&lt;/strong>&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">swapTwoInts&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> a: &lt;span style="color:#66d9ef">inout&lt;/span> Int, &lt;span style="color:#66d9ef">_&lt;/span> b: &lt;span style="color:#66d9ef">inout&lt;/span> Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> temporaryA = a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a = b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b = temporaryA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">swapTwoValues&lt;/span>&amp;lt;T&amp;gt;(&lt;span style="color:#66d9ef">_&lt;/span> a: &lt;span style="color:#66d9ef">inout&lt;/span> T, &lt;span style="color:#66d9ef">_&lt;/span> b: &lt;span style="color:#66d9ef">inout&lt;/span> T) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> temporaryA = a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a = b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b = temporaryA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">swapTwoInts&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> a: &lt;span style="color:#66d9ef">inout&lt;/span> Int, &lt;span style="color:#66d9ef">_&lt;/span> b: &lt;span style="color:#66d9ef">inout&lt;/span> Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">swapTwoValues&lt;/span>&amp;lt;T&amp;gt;(&lt;span style="color:#66d9ef">_&lt;/span> a: &lt;span style="color:#66d9ef">inout&lt;/span> T, &lt;span style="color:#66d9ef">_&lt;/span> b: &lt;span style="color:#66d9ef">inout&lt;/span> T)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> someInt = &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> anotherInt = &lt;span style="color:#ae81ff">107&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swapTwoValues(&amp;amp;someInt, &amp;amp;anotherInt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// someInt 现在是 107，anotherInt 现在是 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> someString = &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> anotherString = &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swapTwoValues(&amp;amp;someString, &amp;amp;anotherString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// someString 现在是“world”，anotherString 现在是“hello”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="不透明类型">不透明类型&lt;/h4>
&lt;p>具有不透明返回类型的函数或方法会隐藏返回值的类型信息。
函数不再提供具体的类型作为返回类型，而是根据它支持的协议来描述返回值。
&lt;strong>不透明类型解决的问题，返回不透明类型，不透明类型和协议类型的区别&lt;/strong>&lt;/p>
&lt;p>在处理模块和调用代码之间的关系时，隐藏类型信息非常有用，因为返回的底层数据类型仍然可以保持私有。
不透明类型和泛型相反。不透明类型允许函数实现时，选择一个与调用代码无关的返回类型。
如果函数中有多个地方返回了不透明类型，那么所有可能的返回值都必须是同一类型。返回不透明类型和返回协议类型主要区别，就在于是否需要保证类型一致性。
一个不透明类型只能对应一个具体的类型，即便函数调用者并不能知道是哪一种类型；协议类型可以同时对应多个类型，只要它们都遵循同一协议。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protocol&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() -&amp;gt; String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Triangle&lt;/span>: Shape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> size: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> result = [String]()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> length &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">1.&lt;/span>..size {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.append(String(repeating: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>, count: length))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result.joined(separator: &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> smallTriangle = Triangle(size: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(smallTriangle.draw())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// *&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// **&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ***&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">FlippedShape&lt;/span>&amp;lt;T: Shape&amp;gt;: Shape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> shape: T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() -&amp;gt; String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> lines = shape.draw().split(separator: &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> lines.reversed().joined(separator: &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> flippedTriangle = FlippedShape(shape: smallTriangle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(flippedTriangle.draw())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ***&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// **&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// *&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="自动引用计数">自动引用计数&lt;/h4>
&lt;p>Swift 使用自动引用计数（ARC）机制来跟踪和管理你的应用程序的内存。
如果两个类实例互相持有对方的强引用，因而每个实例都让对方一直存在，就是这种情况。这就是所谓的循环强引用。
Swift提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（weak reference）和无主引用（unowned reference）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>声明属性或者变量时，在前面加上 weak 关键字表明这是一个弱引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>声明属性或者变量时，在前面加上关键字 unowned 表示这是一个无主引用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 自动引用计数实践&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> name: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.name = name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being initialized&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being deinitialized&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> reference1: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> reference2: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> reference3: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference1 = Person(name: &lt;span style="color:#e6db74">&amp;#34;John Appleseed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“John Appleseed is being initialized”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference2 = reference1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference3 = reference1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference1 = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference2 = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reference3 = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“John Appleseed is being deinitialized”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 循环强引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> name: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String) { &lt;span style="color:#66d9ef">self&lt;/span>.name = name }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> apartment: Apartment?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> { print(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being deinitialized&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Apartment&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> unit: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(unit: String) { &lt;span style="color:#66d9ef">self&lt;/span>.unit = unit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> tenant: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> { print(&lt;span style="color:#e6db74">&amp;#34;Apartment &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>unit&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being deinitialized&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> john: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> unit4A: Apartment?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john = Person(name: &lt;span style="color:#e6db74">&amp;#34;John Appleseed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unit4A = Apartment(unit: &lt;span style="color:#e6db74">&amp;#34;4A&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unit4A = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 弱引用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> name: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(name: String) { &lt;span style="color:#66d9ef">self&lt;/span>.name = name }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> apartment: Apartment?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> { print(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>name&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being deinitialized&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Apartment&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> unit: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(unit: String) { &lt;span style="color:#66d9ef">self&lt;/span>.unit = unit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">weak&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> tenant: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deinit&lt;/span> { print(&lt;span style="color:#e6db74">&amp;#34;Apartment &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>unit&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74"> is being deinitialized&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> john: Person?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> unit4A: Apartment?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john = Person(name: &lt;span style="color:#e6db74">&amp;#34;John Appleseed&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unit4A = Apartment(unit: &lt;span style="color:#e6db74">&amp;#34;4A&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john!.apartment = unit4A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unit4A!.tenant = john
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>john = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 打印“John Appleseed is being deinitialized”&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="内存安全">内存安全&lt;/h4>
&lt;p>默认情况下，Swift 会阻止你代码里不安全的行为。
理解内存访问冲突，In-Out 参数的访问冲突，方法里 self 的访问冲突，属性的访问冲突&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">balance&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> x: &lt;span style="color:#66d9ef">inout&lt;/span> Int, &lt;span style="color:#66d9ef">_&lt;/span> y: &lt;span style="color:#66d9ef">inout&lt;/span> Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> sum = x &lt;span style="color:#f92672">+&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x = sum &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y = sum &lt;span style="color:#f92672">-&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> playerOneScore = &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> playerTwoScore = &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>balance(&amp;amp;playerOneScore, &amp;amp;playerTwoScore) &lt;span style="color:#75715e">// 正常&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>balance(&amp;amp;playerOneScore, &amp;amp;playerOneScore)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 错误：playerOneScore 访问冲突&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="访问控制">访问控制&lt;/h4>
&lt;p>访问控制可以限定其它源文件或模块对你的代码的访问。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>open 和 public 级别可以让实体被同一模块源文件中的所有实体访问，在模块外也可以通过导入该模块来访问源文件里的所有实体。通常情况下，你会使用 open 或 public 级别来指定框架的外部接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>internal 级别让实体被同一模块源文件中的任何实体访问，但是不能被模块外的实体访问。通常情况下，如果某个接口只在应用程序或框架内部使用，就可以将其设置为 internal 级别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>fileprivate 限制实体只能在其定义的文件内部访问。如果功能的部分实现细节只需要在文件内使用时，可以使用 fileprivate 来将其隐藏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>private 限制实体只能在其定义的作用域，以及同一文件内的 extension 访问。如果功能的部分细节只需要在当前作用域内使用时，可以使用 private 来将其隐藏。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>open 为最高访问级别（限制最少），private 为最低访问级别（限制最多）。
open 只能作用于类和类的成员，它和 public 的区别主要在于 open 限定的类和成员能够在模块外能被继承和重写。
示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomePublicClass&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeInternalClass&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fileprivate &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeFilePrivateClass&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomePrivateClass&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeInternalClass&lt;/span> {} &lt;span style="color:#75715e">// 隐式 internal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> someInternalConstant = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// 隐式 internal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomePublicClass&lt;/span> { &lt;span style="color:#75715e">// 显式 public 类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> somePublicProperty = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// 显式 public 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> someInternalProperty = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// 隐式 internal 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fileprivate &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">someFilePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 显式 fileprivate 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">somePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 显式 private 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeInternalClass&lt;/span> { &lt;span style="color:#75715e">// 隐式 internal 类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> someInternalProperty = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// 隐式 internal 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fileprivate &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">someFilePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 显式 fileprivate 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">somePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 显式 private 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fileprivate &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomeFilePrivateClass&lt;/span> { &lt;span style="color:#75715e">// 显式 fileprivate 类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">someFilePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 隐式 fileprivate 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">somePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 显式 private 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SomePrivateClass&lt;/span> { &lt;span style="color:#75715e">// 显式 private 类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">somePrivateMethod&lt;/span>() {} &lt;span style="color:#75715e">// 隐式 private 类成员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="高级运算符">高级运算符&lt;/h4>
&lt;p>Swift还提供了数种可以对数值进行复杂运算的高级运算符。它们包含了位运算符和移位运算符。
&lt;strong>位运算符、溢出运算符、优先级和结合性、运算符函数、自定义运算符&lt;/strong>&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> initialBits: UInt8 = &lt;span style="color:#ae81ff">0b00001111&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> invertedBits = &lt;span style="color:#f92672">~&lt;/span>initialBits &lt;span style="color:#75715e">// 等于 0b11110000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> potentialOverflow = Int16.max
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>potentialOverflow &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这里会报错&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Vector2D&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> x = &lt;span style="color:#ae81ff">0.0&lt;/span>, y = &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">Vector2D&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">left&lt;/span>: Vector2D, &lt;span style="color:#66d9ef">right&lt;/span>: Vector2D) -&amp;gt; Vector2D {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Vector2D(x: &lt;span style="color:#66d9ef">left&lt;/span>.x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">right&lt;/span>.x, y: &lt;span style="color:#66d9ef">left&lt;/span>.y &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">right&lt;/span>.y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> vector = Vector2D(x: &lt;span style="color:#ae81ff">3.0&lt;/span>, y: &lt;span style="color:#ae81ff">1.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> anotherVector = Vector2D(x: &lt;span style="color:#ae81ff">2.0&lt;/span>, y: &lt;span style="color:#ae81ff">4.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> combinedVector = vector &lt;span style="color:#f92672">+&lt;/span> anotherVector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用 Golang 的交叉编译</title><link>https://blog.baicai.me/article/2021/go_cross_compilling/</link><pubDate>Thu, 13 May 2021 14:35:47 +0800</pubDate><guid>https://blog.baicai.me/article/2021/go_cross_compilling/</guid><description>&lt;blockquote>
&lt;p>在 Linux 上测试软件时，我使用各种架构的服务器，例如 Intel、AMD、Arm 等。当我 分配了一台满足我的测试需求的 Linux 机器[1]，我仍然需要执行许多步骤：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>下载并安装必备软件&lt;/li>
&lt;li>验证构建服务器上是否有新的测试软件包&lt;/li>
&lt;li>获取并设置依赖软件包所需的 yum 仓库&lt;/li>
&lt;li>下载并安装新的测试软件包（基于步骤 2）&lt;/li>
&lt;li>获取并设置必需的 SSL 证书&lt;/li>
&lt;li>设置测试环境，获取所需的 Git 仓库，更改配置，重新启动守护进程等&lt;/li>
&lt;li>做其他需要做的事情&lt;/li>
&lt;/ul>
&lt;h3 id="用脚本自动化">用脚本自动化&lt;/h3>
&lt;p>这些步骤非常常规，以至于有必要对其进行自动化并将脚本保存到中央位置（例如文件服务器），在需要时可以在此处下载脚本。为此，我编写了 100-120 行的 Bash shell 脚本，它为我完成了所有配置（包括错误检查）。这个脚本通过以下方式简化了我的工作流程：&lt;/p>
&lt;ul>
&lt;li>配置新的 Linux 系统（支持测试的架构）&lt;/li>
&lt;li>登录系统并从中央位置下载自动化 shell 脚本&lt;/li>
&lt;li>运行它来配置系统&lt;/li>
&lt;li>开始测试&lt;/li>
&lt;/ul>
&lt;h3 id="学习-go-语言">学习 Go 语言&lt;/h3>
&lt;p>我想学习 Go 语言 有一段时间了，将我心爱的 Shell 脚本转换为 Go 程序似乎是一个很好的项目，可以帮助我入门。它的语法看起来很简单，在尝试了一些测试程序后，我开始着手提高自己的知识并熟悉 Go 标准库。&lt;/p>
&lt;p>我花了一个星期的时间在笔记本电脑上编写 Go 程序。我经常在我的 x86 服务器上测试程序，清除错误并使程序健壮起来，一切都很顺利。&lt;/p>
&lt;p>直到完全转换到 Go 程序前，我继续依赖自己的 shell 脚本。然后，我将二进制文件推送到中央文件服务器上，以便每次配置新服务器时，我要做的就是获取二进制文件，将可执行标志打开，然后运行二进制文件。我对早期的结果很满意：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ wget http://file.example.com/&amp;lt;myuser&amp;gt;/bins/prepnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ chmod +x ./prepnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./prepnode
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，出现了一个问题&lt;/p>
&lt;p>第二周，我从资源池中分配了一台新的服务器，像往常一样，我下载了二进制文件，设置了可执行标志，然后运行二进制文件。但这次它出错了，是一个奇怪的错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./prepnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash: ./prepnode: cannot execute binary file: Exec format error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>起初，我以为可能没有成功设置可执行标志。但是，它已按预期设置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -l prepnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwxr-xr-x. &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">2640529&lt;/span> Dec &lt;span style="color:#ae81ff">16&lt;/span> 05:43 prepnode
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>发生了什么事？我没有对源代码进行任何更改，编译没有引发任何错误或警告，而且上次运行时效果很好，因此我仔细查看了错误消息 format error。&lt;/p>
&lt;p>我检查了二进制文件的格式，一切看起来都没问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file prepnode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我迅速运行了以下命令，识别所配置的测试服务器的架构以及二进制试图运行的平台。它是 Arm64 架构，但是我编译的二进制文件（在我的 x86 笔记本电脑上）生成的是 x86-64 格式的二进制文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ uname -m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>aarch64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="脚本编写人员的编译第一课">脚本编写人员的编译第一课&lt;/h3>
&lt;p>在那之前，我从未考虑过这种情况（尽管我知道这一点）。我主要研究脚本语言（通常是 Python）以及 Shell 脚本。在任何架构的大多数 Linux 服务器上都可以使用 Bash Shell 和 Python 解释器。总之，之前一切都很顺利。&lt;/p>
&lt;p>但是，现在我正在处理 Go 这种编译语言，它生成可执行的二进制文件。编译后的二进制文件由特定架构的指令码或汇编指令组成，这就是为什么我收到格式错误的原因。由于 Arm64 CPU（运行二进制文件的地方）无法解释二进制文件的 x86-64 指令，因此它抛出错误。以前，shell 和 Python 解释器为我处理了底层指令码或特定架构的指令。&lt;/p>
&lt;h3 id="go-的交叉编译">Go 的交叉编译&lt;/h3>
&lt;p>我检查了 Golang 的文档，发现要生成 Arm64 二进制文件，我要做的就是在运行 go build 命令编译 Go 程序之前设置两个环境变量。&lt;/p>
&lt;p>GOOS 指的是操作系统，例如 Linux、Windows、BSD 等，而 GOARCH 指的是要在哪种架构上构建程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ env GOOS&lt;span style="color:#f92672">=&lt;/span>linux GOARCH&lt;span style="color:#f92672">=&lt;/span>arm64 go build -o prepnode_arm64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建程序后，我重新运行 file 命令，这一次它显示的是 ARM AArch64，而不是之前显示的 x86。因此，我在我的笔记本上能为不同的架构构建二进制文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file prepnode_arm64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_arm64: ELF 64-bit LSB executable, ARM aarch64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我将二进制文件从笔记本电脑复制到 ARM 服务器上。现在运行二进制文件（将可执行标志打开）不会产生任何错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./prepnode_arm64 -h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage of ./prepnode_arm64:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -c Clean existing installation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n Do not start test run &lt;span style="color:#f92672">(&lt;/span>default true&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -s Use stage environment, default is qa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v Enable verbose output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他架构呢">其他架构呢？&lt;/h3>
&lt;p>x86 和 Arm 是我测试软件所支持的 5 种架构中的两种，我担心 Go 可能不会支持其它架构，但事实并非如此。你可以查看 Go 支持的架构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go tool dist list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go 支持多种平台和操作系统，包括：&lt;/p>
&lt;pre>&lt;code>AIX
Android
Darwin
Dragonfly
FreeBSD
Illumos
ios
Js/wasm
JavaScript
Linux
NetBSD
OpenBSD
Plan 9
Solaris
Windows
&lt;/code>&lt;/pre>
&lt;p>要查找其支持的特定 Linux 架构，运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go tool dist list | grep linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下面的输出所示，Go 支持我使用的所有体系结构。尽管 x86_64 不在列表中，但 AMD64 兼容 x86-64，所以你可以生成 AMD64 二进制文件，它可以在 x86 架构上正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go tool dist list | grep linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/386
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/arm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/arm64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/mips
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/mips64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/mips64le
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/mipsle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/ppc64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/ppc64le
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/riscv64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/s390x
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="处理所有架构">处理所有架构&lt;/h3>
&lt;p>为我测试的所有体系结构生成二进制文件，就像从我的 x86 笔记本电脑编写一个微小的 shell 脚本一样简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>archs&lt;span style="color:#f92672">=(&lt;/span>amd64 arm64 ppc64le ppc64 s390x&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> arch in &lt;span style="color:#e6db74">${&lt;/span>archs[@]&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env GOOS&lt;span style="color:#f92672">=&lt;/span>linux GOARCH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>arch&lt;span style="color:#e6db74">}&lt;/span> go build -o prepnode_&lt;span style="color:#e6db74">${&lt;/span>arch&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file prepnode_*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_amd64: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, Go BuildID&lt;span style="color:#f92672">=&lt;/span>y03MzCXoZERH-0EwAAYI/p909FDnk7xEUo2LdHIyo/V2ABa7X_rLkPNHaFqUQ6/5p_q8MZiR2WYkA5CzJiF, not stripped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_arm64: ELF 64-bit LSB executable, ARM aarch64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, Go BuildID&lt;span style="color:#f92672">=&lt;/span>q-H-CCtLv__jVOcdcOpA/CywRwDz9LN2Wk_fWeJHt/K4-3P5tU2mzlWJa0noGN/SEev9TJFyvHdKZnPaZgb, not stripped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_ppc64: ELF 64-bit MSB executable, 64-bit PowerPC or cisco 7500, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, Go BuildID&lt;span style="color:#f92672">=&lt;/span>DMWfc1QwOGIq2hxEzL_u/UE-9CIvkIMeNC_ocW4ry/r-7NcMATXatoXJQz3yUO/xzfiDIBuUxbuiyaw5Goq, not stripped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_ppc64le: ELF 64-bit LSB executable, 64-bit PowerPC or cisco 7500, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, Go BuildID&lt;span style="color:#f92672">=&lt;/span>C6qCjxwO9s63FJKDrv3f/xCJa4E6LPVpEZqmbF6B4/Mu6T_OR-dx-vLavn1Gyq/AWR1pK1cLz9YzLSFt5eU, not stripped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepnode_s390x: ELF 64-bit MSB executable, IBM S/390, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, statically linked, Go BuildID&lt;span style="color:#f92672">=&lt;/span>faC_HDe1_iVq2XhpPD3d/7TIv0rulE4RZybgJVmPz/o_SZW_0iS0EkJJZHANxx/zuZgo79Je7zAs3v6Lxuz, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，每当配置一台新机器时，我就运行以下 wget 命令下载特定体系结构的二进制文件，将可执行标志打开，然后运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ wget http://file.domain.com/&amp;lt;myuser&amp;gt;/bins/prepnode_&amp;lt;arch&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ chmod +x ./prepnode_&amp;lt;arch&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./prepnode_&amp;lt;arch&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="为什么">为什么？&lt;/h3>
&lt;p>你可能想知道，为什么我没有坚持使用 shell 脚本或将程序移植到 Python 而不是编译语言上来避免这些麻烦。所以有舍有得，那样的话我不会了解 Go 的交叉编译功能，以及程序在 CPU 上执行时的底层工作原理。在计算机中，总要考虑取舍，但绝不要让它们阻碍你的学习。&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>Cross-compiling made easy with Golang &lt;a href="https://opensource.com/article/21/1/go-cross-compiling">[1]&lt;/a>&lt;/p>
&lt;p>使用 Golang 的交叉编译 &lt;a href="https://linux.cn/article-13385-1.html">[2]&lt;/a>&lt;/p></description></item></channel></rss>