<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mac on 白菜</title><link>https://blog.baicai.me/tags/mac/</link><description>Recent content in Mac on 白菜</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>baicai.me</copyright><lastBuildDate>Fri, 31 Mar 2023 22:54:41 +0800</lastBuildDate><atom:link href="https://blog.baicai.me/tags/mac/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac 常用命令</title><link>https://blog.baicai.me/article/2023/mac_cmd/</link><pubDate>Fri, 31 Mar 2023 22:54:41 +0800</pubDate><guid>https://blog.baicai.me/article/2023/mac_cmd/</guid><description>&lt;h2 id="查看指定端口的进程">查看指定端口的进程&lt;/h2>
&lt;p>sudo lsof -i :5353&lt;/p>
&lt;p>COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
mDNSRespo 185 _mdnsresponder 6u IPv4 0x1111111111111 0t0 UDP *:mdns
mDNSRespo 185 _mdnsresponder 7u IPv6 0x1111111111111 0t0 UDP *:mdns&lt;/p>
&lt;h2 id="根据进程名称">根据进程名称&lt;/h2>
&lt;p>ps -ef | grep mDNSRespo&lt;/p>
&lt;p>65 185 1 0 8:08上午 ?? 0:26.69 /usr/sbin/mDNSResponder
0 223 1 0 8:08上午 ?? 0:02.16 /usr/sbin/mDNSResponderHelper
501 66848 66623 0 11:00下午 ttys000 0:00.00 grep mDNSRespo&lt;/p>
&lt;h2 id="根据pid杀进程">根据PID杀进程：&lt;/h2>
&lt;p>sudo kill -9 185&lt;/p></description></item><item><title>MAC命令快速模糊查找文件</title><link>https://blog.baicai.me/article/2021/mac_find/</link><pubDate>Sun, 27 Jun 2021 10:04:44 +0800</pubDate><guid>https://blog.baicai.me/article/2021/mac_find/</guid><description>&lt;h3 id="find命令">find命令&lt;/h3>
&lt;p>描述：通过 find命令查找
语法：find ~ -iname “文件名*”&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 比如我要查找一个以‘vue-’开头的.zip文件,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 但是你忘了它的全名也忘了在那个文件夹，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 查找范围是‘～’节点以内
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 就可以用这种方式进行模糊搜索
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find ~ -iname &lt;span style="color:#e6db74">&amp;#34;vue-*.zip&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 然后它就把所有包含符合条件的文件和路径都打印出来了
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>find不但能查找文件，还能查找文件夹&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 比如我要查找所有包含‘vue’的文件或文件夹
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find ~ -iname &lt;span style="color:#e6db74">&amp;#34;*vue*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 结果它找到了所有包含‘vue’的文件或文件夹
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>find方式很简单但是需要一点专业知识，需要知道一些正则的基本常识，需要指定路径范围，搜索的名字需要加引号等等&lt;/p>
&lt;h3 id="mdfind命令">mdfind命令&lt;/h3>
&lt;p>描述：通过 mdfind命令查找
语法：mdfind -name 文件名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 比如我要查找所有包含‘vue’的文件或文件夹
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mdfind -name vue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 看，我直接输入我要找的关键字‘vue’
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* 就把所有文件和文件夹都输出出来了，是不是很方便
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mdfind 简单粗暴，没缺点，但有个前提是你mac电脑要支持Spotlight功能，不过也不用担心，一般mac默认是支持的&lt;/p>
&lt;h3 id="在-shell-中执行命令">在 shell 中执行命令&lt;/h3>
&lt;blockquote>
&lt;p>你是找到这个文件或文件夹了，但是你想直接打开它，那么怎么打开呢，看下面&lt;/p>
&lt;/blockquote>
&lt;p>若要运行当前用户个人文件夹中的命令，请在前面加上文件夹说明符。例如，若要运行 MyCommandLineProg，请使用以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% ~/MyCommandLineProg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>若要打开一个 App，请使用打开命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% open -a MyProg.app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="终止命令">终止命令&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在 Mac 上的“终端” App 中，点按正在运行您想要终止的命令的“终端”窗口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按下 Control-C 键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这会发出一个让大多数命令终止的信号。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>在 Mac 上的“终端”中执行命令和运行工具 &lt;a href="https://support.apple.com/zh-cn/guide/terminal/apdb66b5242-0d18-49fc-9c47-a2498b7c91d5/mac">[1]&lt;/a>&lt;/p>
&lt;p>MAC命令快速全局查找文件或文件夹，支持模糊搜索 &lt;a href="https://blog.csdn.net/weixin_34403976/article/details/88844651">[2]&lt;/a>&lt;/p></description></item><item><title>使用 sed 命令进行复制、剪切和粘贴</title><link>https://blog.baicai.me/article/2021/linux_sed/</link><pubDate>Mon, 24 May 2021 00:39:20 +0800</pubDate><guid>https://blog.baicai.me/article/2021/linux_sed/</guid><description>&lt;blockquote>
&lt;p>很少有 Unix 命令像 sed、grep 和 awk 一样出名，它们经常组合在一起，可能是因为它们具有奇怪的名称和强大的文本解析能力。它们还在一些语法和逻辑上有相似之处。虽然它们都能用于文本解析，但都有其特殊性。本文研究 sed 命令，它是一个 流编辑器。&lt;/p>
&lt;/blockquote>
&lt;h3 id="安装-sed">安装 sed&lt;/h3>
&lt;p>如果你使用的是 Linux、BSD 或 macOS，那么它们已经安装了 GNU 的或 BSD 的 sed。这些是原始 sed 命令的独特重新实现。虽然它们很相似，但也有一些细微的差别。本文已经在 Linux 和 NetBSD 版本上进行了测试，所以你可以使用你的计算机上找到的任何 sed，但是对于 BSD sed，你必须使用短选项（例如 -n 而不是 &amp;ndash;quiet）。&lt;/p>
&lt;p>GNU sed 通常被认为是功能最丰富的 sed，因此无论你是否运行 Linux，你可能都想要尝试一下。如果在 Ports 树中找不到 GNU sed（在非 Linux 系统上通常称为 gsed），你可以从 GNU 网站 下载源代码。 安装 GNU sed 的好处是，你可以使用它的额外功能，但是如果需要可移植性，还可以限制它以遵守 sed 的 POSIX 规范。&lt;/p>
&lt;p>MacOS 用户可以在 MacPorts 或 Homebrew 上找到 GNU sed。&lt;/p>
&lt;p>在 Windows 上，你可以通过 Chocolatey 来 安装 GNU sed。&lt;/p>
&lt;h3 id="了解模式空间和保留空间">了解模式空间和保留空间&lt;/h3>
&lt;p>sed 一次只能处理一行。因为它没有可视化模式，所以会创建一个 模式空间，这是一个内存空间，其中包含来自输入流的当前行（删除了尾部的任何换行符）。填充模式空间后，sed 将执行你的指令。当命令执行完时，sed 将模式空间中的内容打印到输出流，默认是 标准输出，但是可以将输出重定向到文件，甚至使用 &lt;code>--in-place=.bak&lt;/code> 选项重定向到同一文件。&lt;/p>
&lt;p>然后，循环从下一个输入行再次开始。&lt;/p>
&lt;p>为了在遍历文件时提供一点灵活性，sed 还提供了保留空间（有时也称为 保留缓冲区），即 sed 内存中为临时数据存储保留的空间。你可以将保留空间当作剪贴板，实际上，这正是本文所演示的内容：如何使用 sed 复制/剪切和粘贴。&lt;/p>
&lt;p>首先，创建一个示例文本文件，其内容如下：&lt;/p>
&lt;pre>&lt;code>Line one
Line three
Line two
&lt;/code>&lt;/pre>
&lt;h3 id="复制数据到保留空间">复制数据到保留空间&lt;/h3>
&lt;p>要将内容放置在 sed 的保留空间，使用 &lt;code>h&lt;/code> 或 &lt;code>H&lt;/code> 命令。小写的 &lt;code>h&lt;/code> 告诉 sed 覆盖保留空间中的当前内容，而大写的 &lt;code>H&lt;/code> 告诉 sed 将数据追加到保留空间中已经存在的内容之后。&lt;/p>
&lt;p>单独使用，什么都看不到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed --quiet -e &lt;span style="color:#e6db74">&amp;#39;/three/ h&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>--quiet&lt;/code>（缩写为 &lt;code>-n&lt;/code>）选项禁止显示所有输出，但 sed 执行了我的搜索需求。在这种情况下，sed 选择包含字符串 three 的任何行，并将其复制到保留空间。我没有告诉 sed 打印任何东西，所以没有输出。&lt;/p>
&lt;h3 id="从保留空间复制数据">从保留空间复制数据&lt;/h3>
&lt;p>要了解保留空间，你可以从保留空间复制内容，然后使用 g 命令将其放入模式空间，观察会发生什么：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed -n -e &lt;span style="color:#e6db74">&amp;#39;/three/h&amp;#39;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#39;g;p&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个空白行是因为当 sed 第一次复制内容到模式空间时，保留空间为空。&lt;/p>
&lt;p>接下来的两行包含 &lt;code>Line three&lt;/code> 是因为这是从第二行开始的保留空间。&lt;/p>
&lt;p>该命令使用两个唯一的脚本（-e）纯粹是为了帮助提高可读性和组织性。将步骤划分为单独的脚本可能会很有用，但是从技术上讲，以下命令与一个脚本语句一样有效：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed -n -e &lt;span style="color:#e6db74">&amp;#39;/three/h ; g ; p&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="将数据追加到模式空间">将数据追加到模式空间&lt;/h3>
&lt;p>&lt;code>G&lt;/code> 命令会将一个换行符和保留空间的内容添加到模式空间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed -n -e &lt;span style="color:#e6db74">&amp;#39;/three/h&amp;#39;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#39;G;p&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此输出的前两行同时包含模式空间（&lt;code>Line one&lt;/code>）的内容和空的保留空间。接下来的两行与搜索文本（&lt;code>three&lt;/code>）匹配，因此它既包含模式空间又包含保留空间。第三行的保留空间没有变化，因此在模式空间（&lt;code>Line two&lt;/code>）的末尾是保留空间（仍然是 &lt;code>Line three&lt;/code>）。&lt;/p>
&lt;h3 id="用-sed-剪切和粘贴">用 sed 剪切和粘贴&lt;/h3>
&lt;p>现在你知道了如何将字符串从模式空间转到保留空间并再次返回，你可以设计一个 sed 脚本来复制、删除，然后在文档中粘贴一行。例如，将示例文件的 Line three 挪至第三行，sed 可以解决这个问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed -n -e &lt;span style="color:#e6db74">&amp;#39;/three/ h&amp;#39;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#39;/three/ d&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-e &lt;span style="color:#e6db74">&amp;#39;/two/ G;p&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>第一个脚本找到包含字符串 &lt;code>three&lt;/code> 的行，并将其从模式空间复制到保留空间，替换当前保留空间中的任何内容。&lt;/li>
&lt;li>第二个脚本删除包含字符串 &lt;code>three&lt;/code> 的任何行。这样就完成了与文字处理器或文本编辑器中的 剪切 动作等效的功能。&lt;/li>
&lt;li>最后一个脚本找到包含字符串 &lt;code>two&lt;/code> 的行，并将保留空间的内容_追加_到模式空间，然后打印模式空间。&lt;/li>
&lt;/ul>
&lt;p>任务完成。&lt;/p>
&lt;h3 id="使用-sed-编写脚本">使用 sed 编写脚本&lt;/h3>
&lt;p>再说一次，使用单独的脚本语句纯粹是为了视觉和心理上的简单。剪切和粘贴命令作为一个脚本同样有效：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sed -n -e &lt;span style="color:#e6db74">&amp;#39;/three/ h ; /three/ d ; /two/ G ; p&amp;#39;&lt;/span> example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它甚至可以写在一个专门的脚本文件中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/sed -nf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/three/h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/three/d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/two/ G
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要运行该脚本，将其加入可执行权限，然后用示例文件尝试：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ chmod +x myscript.sed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./myscript.sed example.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line three
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，你需要解析的文本越可预测，则使用 sed 解决问题越容易。发明 sed 操作（例如复制和粘贴）的“配方”通常是不切实际的，因为触发操作的条件可能因文件而异。但是，你对 sed 命令的使用越熟练，就越容易根据需要解析的输入来设计复杂的动作。&lt;/p>
&lt;p>重要的事情是识别不同的操作，了解 sed 何时移至下一行，并预测模式和保留空间包含的内容。&lt;/p>
&lt;p>sed 很复杂。虽然它只有十几个命令，但它灵活的语法和原生功能意味着它充满了无限的潜力。&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>How to use the Linux sed command &lt;a href="https://opensource.com/article/21/3/sed-cheat-sheet">[1]&lt;/a>&lt;/p>
&lt;p>使用 sed 命令进行复制、剪切和粘贴 &lt;a href="https://linux.cn/article-13417-1.html">[2]&lt;/a>&lt;/p></description></item><item><title>Linux/Mac 使用 GNU Screen 的小技巧</title><link>https://blog.baicai.me/article/2021/linux_screen/</link><pubDate>Thu, 13 May 2021 12:50:05 +0800</pubDate><guid>https://blog.baicai.me/article/2021/linux_screen/</guid><description>&lt;blockquote>
&lt;p>学习基本的 GNU Screen 终端复用技术，然后下载我们的终端命令备忘录，以便你能够熟悉常用的快捷方式。&lt;/p>
&lt;/blockquote>
&lt;p>对于一般用户而言，命令行终端窗口可能是令人困惑和神秘的。但随着你对 Linux 终端的进一步了解，你很快就会意识到它的高效和强大。不过，也不需要很长时间，你就会想让终端变得更加高效，除了将更多的终端放到你的终端，还有什么高好的方法能够提升你的终端效率呢？&lt;/p>
&lt;h3 id="终端复用">终端复用&lt;/h3>
&lt;p>终端的许多优点之一是它是一个集中控制的界面。它是一个能让你访问数百个应用程序的窗口，而你与每一个应用程序进行交互所需要的只是一个键盘。但是，现代计算机几乎总是有多余的处理能力，而且现代计算机专家喜欢多任务处理，导致一个窗口处理数百个应用程序的能力是相当有限的。&lt;/p>
&lt;p>解决这一问题的常见答案是终端复用：即将虚拟终端叠放在一起，然后在它们之间移动的能力。通过终端复用器，你保持了集中控制，但是当你进行多任务时，你能够进行终端切换。更好的是，你能够在终端中拆分屏幕，使得在同一时间显示多个屏幕窗口。&lt;/p>
&lt;h3 id="选择合适的复用器">选择合适的复用器&lt;/h3>
&lt;p>一些终端提供类似的功能，有标签式界面和分割式视图，但也有细微的差别。首先，这些终端的功能依赖于图形化的桌面环境。其次，许多图形化的终端功能需要鼠标交互或使用不方便的键盘快捷键。终端复用器的功能在文本控制台上和在图形桌面上一样好用，而且键位绑定是针对常见的终端序列设计的，很方便。&lt;/p>
&lt;p>现有两种流行的复用器：tmux 和 GNU Screen。尽管你与它们互动的方式略有不同，但它们做同样的事情，而且大多具有相同的功能。这篇文章是 GNU Screen 的入门指南。关于 tmux 的相关介绍，请阅读 Kevin Sonney 的 tmux 介绍。&lt;/p>
&lt;h3 id="使用-gnu-screen">使用 GNU Screen&lt;/h3>
&lt;p>GNU Screen 的基本用法很简单，通过 &lt;code>screen&lt;/code> 命令启动，你将进入 Screen 会话的第 0 个窗口。在你决定需要一个新的终端提示符前，你可能很难注意到有什么变化。&lt;/p>
&lt;p>当一个终端窗口被某项活动占用（比如，你启动了文本编辑器 &lt;strong>Vim&lt;/strong> 或 &lt;strong>Jove&lt;/strong> 或者你在处理音视频，或运行批处理任务），你可以新建一个窗口。要打开一个新的窗口，按 &lt;code>Ctrl+A&lt;/code>，释放，然后按 &lt;code>c&lt;/code>。这将在你现有窗口的基础上创建一个新的窗口。&lt;/p>
&lt;p>你会知道当前你是在一个新的窗口中，因为你的终端除了默认的提示符外，似乎没有任何东西。当然，你的另一个终端仍然存在，它只是躲在新窗口的后面。要遍历打开的窗口，按 &lt;code>Ctrl+A&lt;/code>，释放，然后按 &lt;code>n&lt;/code>（表示下一个）或按 &lt;code>p&lt;/code>（表示上一个）。在只打开两个窗口的情况下， &lt;code>n&lt;/code> 和 &lt;code>p&lt;/code> 的功能是一样的，但你可以随时打开更多的窗口（&lt;code>Ctrl+A&lt;/code>，然后 &lt;code>c&lt;/code> ），并在它们之间切换。&lt;/p>
&lt;h3 id="分屏">分屏&lt;/h3>
&lt;p>GNU Screen 的默认行为更像移动设备的屏幕，而不是桌面：你一次只能看到一个窗口。如果你因为喜欢多任务而使用 GNU Screen ，那么只关注一个窗口可能看起来是一种退步。幸运的是，GNU Screen 可以让你把终端分成窗口中的窗口。&lt;/p>
&lt;p>要创建一个水平分割窗口，按 &lt;code>Ctrl+A&lt;/code>，然后按 &lt;code>s&lt;/code> 。这将把一个窗口置于另一个窗口之上，就像窗格一样。然而，在你告诉它要显示什么之前，分割的空间是没有用途的。因此，在创建一个分割窗后，你可以用 &lt;code>Ctrl+A&lt;/code> ，然后用 &lt;code>Tab&lt;/code> 移动到分割窗中。一旦进入，使用 &lt;code>Ctrl+A&lt;/code> 然后 &lt;code>n&lt;/code> 浏览所有可用的窗口，直到你想显示的内容出现在分割窗格中。&lt;/p>
&lt;p>你也可以按 &lt;code>Ctrl+A&lt;/code> 然后按 &lt;code>|&lt;/code> （这是一个管道字符，在大多数键盘上通过按下 &lt;code>shift&lt;/code> 键加上 &lt;code>\&lt;/code>）创建垂直分割窗口。&lt;/p>
&lt;h3 id="自定义-gnu-screen">自定义 GNU Screen&lt;/h3>
&lt;p>GNU Screen 使用基于 &lt;code>Ctrl+A&lt;/code> 的快捷键。根据你的习惯，这可能会让你感觉非常自然，也可能非常不方便，因为你可能会用 &lt;code>Ctrl+A&lt;/code> 来移动到一行的开头。无论怎样，GNU Screen 允许通过 &lt;code>.screenrc&lt;/code> 配置文件进行各种定制。你可以用这个来改变触发键的绑定（称为 “转义” 键绑定）。&lt;/p>
&lt;p>&lt;code>escape ^jJ&lt;/code>&lt;/p>
&lt;p>你还可以添加一个状态行，以帮助你在 Screen 会话中保持自己不迷失。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># status bar, with current window highlighted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hardstatus alwayslastline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hardstatus string &lt;span style="color:#e6db74">&amp;#39;%{= kG}[%{G}%H%? %1`%?%{g}][%= %{= kw}%-w%{+b yk} %n*%t%?(%u)%? %{-}%+w %=%{g}][%{B}%m/%d %{W}%C%A%{g}]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># enable 256 colors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attrcolor b &lt;span style="color:#e6db74">&amp;#34;.I&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> termcapinfo xterm &lt;span style="color:#e6db74">&amp;#39;Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defbce on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在有多个窗口打开的会话中，有一个时刻提醒哪些窗口具有焦点活动，哪些窗口有后台活动的提醒器特别有用。它类似一种终端的任务管理器。&lt;/p>
&lt;h3 id="备忘单">备忘单&lt;/h3>
&lt;p>当你学习 GNU Screen 的使用方法时，需要记住很多新的键盘命令。有些命令你马上就能记住，但那些你不常使用的命令可能就很难记住了。你可以按 &lt;code>Ctrl+A&lt;/code> 然后再按 &lt;code>?&lt;/code> 来访问 GNU Screen 的帮助界面。&lt;/p>
&lt;p>学习 GNU Screen 是提高你使用你最喜欢的 终端模拟器 的效率和敏捷性的一个好方法。请试一试吧！&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;p>Linux tips for using GNU Screen &lt;a href="https://opensource.com/article/21/4/gnu-screen-cheat-sheet">[1]&lt;/a>&lt;/p>
&lt;p>使用 GNU Screen 的小技巧 &lt;a href="https://linux.cn/article-13387-1.html">[2]&lt;/a>&lt;/p></description></item></channel></rss>